// Code generated by protoc-gen-go. DO NOT EDIT.
// source: data-source.proto

package ds_grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DSRawResponse_ErrorCode int32

const (
	DSRawResponse_NONE        DSRawResponse_ErrorCode = 0
	DSRawResponse_BAD_REQUEST DSRawResponse_ErrorCode = 1
	DSRawResponse_NO_DATA     DSRawResponse_ErrorCode = 2
)

var DSRawResponse_ErrorCode_name = map[int32]string{
	0: "NONE",
	1: "BAD_REQUEST",
	2: "NO_DATA",
}

var DSRawResponse_ErrorCode_value = map[string]int32{
	"NONE":        0,
	"BAD_REQUEST": 1,
	"NO_DATA":     2,
}

func (x DSRawResponse_ErrorCode) String() string {
	return proto.EnumName(DSRawResponse_ErrorCode_name, int32(x))
}

func (DSRawResponse_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dd427742966edf42, []int{1, 0}
}

type DSAccessPath struct {
	Address              []byte   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Path                 []byte   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DSAccessPath) Reset()         { *m = DSAccessPath{} }
func (m *DSAccessPath) String() string { return proto.CompactTextString(m) }
func (*DSAccessPath) ProtoMessage()    {}
func (*DSAccessPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd427742966edf42, []int{0}
}

func (m *DSAccessPath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DSAccessPath.Unmarshal(m, b)
}
func (m *DSAccessPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DSAccessPath.Marshal(b, m, deterministic)
}
func (m *DSAccessPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSAccessPath.Merge(m, src)
}
func (m *DSAccessPath) XXX_Size() int {
	return xxx_messageInfo_DSAccessPath.Size(m)
}
func (m *DSAccessPath) XXX_DiscardUnknown() {
	xxx_messageInfo_DSAccessPath.DiscardUnknown(m)
}

var xxx_messageInfo_DSAccessPath proto.InternalMessageInfo

func (m *DSAccessPath) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *DSAccessPath) GetPath() []byte {
	if m != nil {
		return m.Path
	}
	return nil
}

type DSRawResponse struct {
	Blob                 []byte                  `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
	ErrorCode            DSRawResponse_ErrorCode `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3,enum=ds_grpc.DSRawResponse_ErrorCode" json:"error_code,omitempty"`
	ErrorMessage         string                  `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *DSRawResponse) Reset()         { *m = DSRawResponse{} }
func (m *DSRawResponse) String() string { return proto.CompactTextString(m) }
func (*DSRawResponse) ProtoMessage()    {}
func (*DSRawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd427742966edf42, []int{1}
}

func (m *DSRawResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DSRawResponse.Unmarshal(m, b)
}
func (m *DSRawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DSRawResponse.Marshal(b, m, deterministic)
}
func (m *DSRawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSRawResponse.Merge(m, src)
}
func (m *DSRawResponse) XXX_Size() int {
	return xxx_messageInfo_DSRawResponse.Size(m)
}
func (m *DSRawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DSRawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DSRawResponse proto.InternalMessageInfo

func (m *DSRawResponse) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

func (m *DSRawResponse) GetErrorCode() DSRawResponse_ErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return DSRawResponse_NONE
}

func (m *DSRawResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type DSAccessPaths struct {
	Paths                []*DSAccessPath `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DSAccessPaths) Reset()         { *m = DSAccessPaths{} }
func (m *DSAccessPaths) String() string { return proto.CompactTextString(m) }
func (*DSAccessPaths) ProtoMessage()    {}
func (*DSAccessPaths) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd427742966edf42, []int{2}
}

func (m *DSAccessPaths) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DSAccessPaths.Unmarshal(m, b)
}
func (m *DSAccessPaths) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DSAccessPaths.Marshal(b, m, deterministic)
}
func (m *DSAccessPaths) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSAccessPaths.Merge(m, src)
}
func (m *DSAccessPaths) XXX_Size() int {
	return xxx_messageInfo_DSAccessPaths.Size(m)
}
func (m *DSAccessPaths) XXX_DiscardUnknown() {
	xxx_messageInfo_DSAccessPaths.DiscardUnknown(m)
}

var xxx_messageInfo_DSAccessPaths proto.InternalMessageInfo

func (m *DSAccessPaths) GetPaths() []*DSAccessPath {
	if m != nil {
		return m.Paths
	}
	return nil
}

type DSRawResponses struct {
	Blobs                [][]byte `protobuf:"bytes,1,rep,name=blobs,proto3" json:"blobs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DSRawResponses) Reset()         { *m = DSRawResponses{} }
func (m *DSRawResponses) String() string { return proto.CompactTextString(m) }
func (*DSRawResponses) ProtoMessage()    {}
func (*DSRawResponses) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd427742966edf42, []int{3}
}

func (m *DSRawResponses) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DSRawResponses.Unmarshal(m, b)
}
func (m *DSRawResponses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DSRawResponses.Marshal(b, m, deterministic)
}
func (m *DSRawResponses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSRawResponses.Merge(m, src)
}
func (m *DSRawResponses) XXX_Size() int {
	return xxx_messageInfo_DSRawResponses.Size(m)
}
func (m *DSRawResponses) XXX_DiscardUnknown() {
	xxx_messageInfo_DSRawResponses.DiscardUnknown(m)
}

var xxx_messageInfo_DSRawResponses proto.InternalMessageInfo

func (m *DSRawResponses) GetBlobs() [][]byte {
	if m != nil {
		return m.Blobs
	}
	return nil
}

func init() {
	proto.RegisterEnum("ds_grpc.DSRawResponse_ErrorCode", DSRawResponse_ErrorCode_name, DSRawResponse_ErrorCode_value)
	proto.RegisterType((*DSAccessPath)(nil), "ds_grpc.DSAccessPath")
	proto.RegisterType((*DSRawResponse)(nil), "ds_grpc.DSRawResponse")
	proto.RegisterType((*DSAccessPaths)(nil), "ds_grpc.DSAccessPaths")
	proto.RegisterType((*DSRawResponses)(nil), "ds_grpc.DSRawResponses")
}

func init() {
	proto.RegisterFile("data-source.proto", fileDescriptor_dd427742966edf42)
}

var fileDescriptor_dd427742966edf42 = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x4f, 0x6b, 0xea, 0x40,
	0x14, 0xc5, 0x8d, 0x7f, 0x5f, 0x6e, 0xa2, 0xcf, 0x37, 0xbc, 0xe7, 0x0b, 0xae, 0x24, 0x85, 0x22,
	0x94, 0x66, 0xa1, 0xab, 0x82, 0xd0, 0xa6, 0x4d, 0xe8, 0x4a, 0x6d, 0x27, 0x76, 0x1d, 0xc6, 0xe4,
	0xa2, 0x82, 0xed, 0x84, 0xb9, 0xb1, 0x7e, 0x85, 0x7e, 0xaa, 0x7e, 0xb6, 0x92, 0x44, 0x6b, 0x85,
	0xec, 0xee, 0xbd, 0x9c, 0xdf, 0xe1, 0x9c, 0x19, 0xf8, 0x13, 0x8b, 0x54, 0x5c, 0x93, 0xdc, 0xa9,
	0x08, 0x9d, 0x44, 0xc9, 0x54, 0xb2, 0x56, 0x4c, 0xe1, 0x4a, 0x25, 0x91, 0x3d, 0x01, 0xd3, 0x0b,
	0xdc, 0x28, 0x42, 0xa2, 0x27, 0x91, 0xae, 0x99, 0x05, 0x2d, 0x11, 0xc7, 0x0a, 0x89, 0x2c, 0x6d,
	0xa0, 0x0d, 0x4d, 0x7e, 0x5c, 0x19, 0x83, 0x7a, 0x22, 0xd2, 0xb5, 0x55, 0xcd, 0xcf, 0xf9, 0x6c,
	0x7f, 0x6a, 0xd0, 0xf6, 0x02, 0x2e, 0xf6, 0x1c, 0x29, 0x91, 0x6f, 0x84, 0x99, 0x6a, 0xb9, 0x95,
	0xcb, 0x03, 0x9c, 0xcf, 0xec, 0x16, 0x00, 0x95, 0x92, 0x2a, 0x8c, 0x64, 0x8c, 0x39, 0xdf, 0x19,
	0x0d, 0x9c, 0x43, 0x02, 0xe7, 0x8c, 0x77, 0xfc, 0x4c, 0xf8, 0x20, 0x63, 0xe4, 0x3a, 0x1e, 0x47,
	0x76, 0x01, 0xed, 0xc2, 0xe0, 0x15, 0x89, 0xc4, 0x0a, 0xad, 0xda, 0x40, 0x1b, 0xea, 0xdc, 0xcc,
	0x8f, 0xd3, 0xe2, 0x66, 0x8f, 0x41, 0xff, 0x86, 0xd9, 0x2f, 0xa8, 0xcf, 0xe6, 0x33, 0xbf, 0x5b,
	0x61, 0xbf, 0xc1, 0xb8, 0x77, 0xbd, 0x90, 0xfb, 0xcf, 0x2f, 0x7e, 0xb0, 0xe8, 0x6a, 0xcc, 0x80,
	0xd6, 0x6c, 0x1e, 0x7a, 0xee, 0xc2, 0xed, 0x56, 0xed, 0x49, 0x96, 0xff, 0x54, 0x9f, 0xd8, 0x15,
	0x34, 0xb2, 0x66, 0x59, 0xfb, 0xda, 0xd0, 0x18, 0xfd, 0xfb, 0x11, 0xf3, 0x24, 0xe3, 0x85, 0xc6,
	0xbe, 0x84, 0xce, 0x59, 0x7a, 0x62, 0x7f, 0xa1, 0x91, 0x55, 0x2e, 0x70, 0x93, 0x17, 0xcb, 0xe8,
	0x43, 0x03, 0xdd, 0x0b, 0x02, 0x54, 0xef, 0x9b, 0x08, 0xd9, 0x0d, 0x34, 0x1f, 0x31, 0xe5, 0x62,
	0xcf, 0xca, 0xdd, 0xfb, 0xbd, 0xf2, 0xb7, 0xb1, 0x2b, 0xec, 0x0e, 0x8c, 0xe9, 0x6e, 0x9b, 0x6e,
	0x0e, 0x7c, 0xaf, 0x94, 0xa7, 0xfe, 0xff, 0x72, 0x03, 0xb2, 0x2b, 0xcb, 0x66, 0xfe, 0xff, 0xe3,
	0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb0, 0xb6, 0xd8, 0x24, 0x14, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DSServiceClient is the client API for DSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DSServiceClient interface {
	GetRaw(ctx context.Context, in *DSAccessPath, opts ...grpc.CallOption) (*DSRawResponse, error)
	MultiGetRaw(ctx context.Context, in *DSAccessPaths, opts ...grpc.CallOption) (*DSRawResponses, error)
}

type dSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDSServiceClient(cc grpc.ClientConnInterface) DSServiceClient {
	return &dSServiceClient{cc}
}

func (c *dSServiceClient) GetRaw(ctx context.Context, in *DSAccessPath, opts ...grpc.CallOption) (*DSRawResponse, error) {
	out := new(DSRawResponse)
	err := c.cc.Invoke(ctx, "/ds_grpc.DSService/GetRaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSServiceClient) MultiGetRaw(ctx context.Context, in *DSAccessPaths, opts ...grpc.CallOption) (*DSRawResponses, error) {
	out := new(DSRawResponses)
	err := c.cc.Invoke(ctx, "/ds_grpc.DSService/MultiGetRaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DSServiceServer is the server API for DSService service.
type DSServiceServer interface {
	GetRaw(context.Context, *DSAccessPath) (*DSRawResponse, error)
	MultiGetRaw(context.Context, *DSAccessPaths) (*DSRawResponses, error)
}

// UnimplementedDSServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDSServiceServer struct {
}

func (*UnimplementedDSServiceServer) GetRaw(ctx context.Context, req *DSAccessPath) (*DSRawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaw not implemented")
}
func (*UnimplementedDSServiceServer) MultiGetRaw(ctx context.Context, req *DSAccessPaths) (*DSRawResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiGetRaw not implemented")
}

func RegisterDSServiceServer(s *grpc.Server, srv DSServiceServer) {
	s.RegisterService(&_DSService_serviceDesc, srv)
}

func _DSService_GetRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DSAccessPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSServiceServer).GetRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ds_grpc.DSService/GetRaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSServiceServer).GetRaw(ctx, req.(*DSAccessPath))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSService_MultiGetRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DSAccessPaths)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSServiceServer).MultiGetRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ds_grpc.DSService/MultiGetRaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSServiceServer).MultiGetRaw(ctx, req.(*DSAccessPaths))
	}
	return interceptor(ctx, in, info, handler)
}

var _DSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ds_grpc.DSService",
	HandlerType: (*DSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRaw",
			Handler:    _DSService_GetRaw_Handler,
		},
		{
			MethodName: "MultiGetRaw",
			Handler:    _DSService_MultiGetRaw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data-source.proto",
}
