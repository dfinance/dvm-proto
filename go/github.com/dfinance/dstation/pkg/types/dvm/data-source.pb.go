// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.13.0
// source: dfinance/dvm/data-source.proto

package dvm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorCode int32

const (
	ErrorCode_NONE        ErrorCode = 0 // no error
	ErrorCode_BAD_REQUEST ErrorCode = 1 // crash of compilation, logs will show stacktrace
	ErrorCode_NO_DATA     ErrorCode = 2 // no such module
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "NONE",
		1: "BAD_REQUEST",
		2: "NO_DATA",
	}
	ErrorCode_value = map[string]int32{
		"NONE":        0,
		"BAD_REQUEST": 1,
		"NO_DATA":     2,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_dfinance_dvm_data_source_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_dfinance_dvm_data_source_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_dfinance_dvm_data_source_proto_rawDescGZIP(), []int{0}
}

type DSAccessPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // AccountAddress
	Path    []byte `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *DSAccessPath) Reset() {
	*x = DSAccessPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_data_source_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DSAccessPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSAccessPath) ProtoMessage() {}

func (x *DSAccessPath) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_data_source_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSAccessPath.ProtoReflect.Descriptor instead.
func (*DSAccessPath) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_data_source_proto_rawDescGZIP(), []int{0}
}

func (x *DSAccessPath) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *DSAccessPath) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

type DSRawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blob         []byte    `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
	ErrorCode    ErrorCode `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3,enum=dfinance.dvm.ErrorCode" json:"error_code,omitempty"`
	ErrorMessage string    `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // error message from libra, empty if ErrorCode::None
}

func (x *DSRawResponse) Reset() {
	*x = DSRawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_data_source_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DSRawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSRawResponse) ProtoMessage() {}

func (x *DSRawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_data_source_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSRawResponse.ProtoReflect.Descriptor instead.
func (*DSRawResponse) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_data_source_proto_rawDescGZIP(), []int{1}
}

func (x *DSRawResponse) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

func (x *DSRawResponse) GetErrorCode() ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCode_NONE
}

func (x *DSRawResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type DSAccessPaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths []*DSAccessPath `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *DSAccessPaths) Reset() {
	*x = DSAccessPaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_data_source_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DSAccessPaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSAccessPaths) ProtoMessage() {}

func (x *DSAccessPaths) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_data_source_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSAccessPaths.ProtoReflect.Descriptor instead.
func (*DSAccessPaths) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_data_source_proto_rawDescGZIP(), []int{2}
}

func (x *DSAccessPaths) GetPaths() []*DSAccessPath {
	if x != nil {
		return x.Paths
	}
	return nil
}

type DSRawResponses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blobs [][]byte `protobuf:"bytes,1,rep,name=blobs,proto3" json:"blobs,omitempty"`
}

func (x *DSRawResponses) Reset() {
	*x = DSRawResponses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_data_source_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DSRawResponses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSRawResponses) ProtoMessage() {}

func (x *DSRawResponses) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_data_source_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSRawResponses.ProtoReflect.Descriptor instead.
func (*DSRawResponses) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_data_source_proto_rawDescGZIP(), []int{3}
}

func (x *DSRawResponses) GetBlobs() [][]byte {
	if x != nil {
		return x.Blobs
	}
	return nil
}

type OraclePriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency_1 string `protobuf:"bytes,1,opt,name=currency_1,json=currency1,proto3" json:"currency_1,omitempty"`
	Currency_2 string `protobuf:"bytes,2,opt,name=currency_2,json=currency2,proto3" json:"currency_2,omitempty"`
}

func (x *OraclePriceRequest) Reset() {
	*x = OraclePriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_data_source_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OraclePriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OraclePriceRequest) ProtoMessage() {}

func (x *OraclePriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_data_source_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OraclePriceRequest.ProtoReflect.Descriptor instead.
func (*OraclePriceRequest) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_data_source_proto_rawDescGZIP(), []int{4}
}

func (x *OraclePriceRequest) GetCurrency_1() string {
	if x != nil {
		return x.Currency_1
	}
	return ""
}

func (x *OraclePriceRequest) GetCurrency_2() string {
	if x != nil {
		return x.Currency_2
	}
	return ""
}

type OraclePriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price        *U128     `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	ErrorCode    ErrorCode `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3,enum=dfinance.dvm.ErrorCode" json:"error_code,omitempty"`
	ErrorMessage string    `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // error message from libra, empty if ErrorCode::None
}

func (x *OraclePriceResponse) Reset() {
	*x = OraclePriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_data_source_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OraclePriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OraclePriceResponse) ProtoMessage() {}

func (x *OraclePriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_data_source_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OraclePriceResponse.ProtoReflect.Descriptor instead.
func (*OraclePriceResponse) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_data_source_proto_rawDescGZIP(), []int{5}
}

func (x *OraclePriceResponse) GetPrice() *U128 {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *OraclePriceResponse) GetErrorCode() ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCode_NONE
}

func (x *OraclePriceResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type NativeBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Ticker  string `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
}

func (x *NativeBalanceRequest) Reset() {
	*x = NativeBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_data_source_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeBalanceRequest) ProtoMessage() {}

func (x *NativeBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_data_source_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeBalanceRequest.ProtoReflect.Descriptor instead.
func (*NativeBalanceRequest) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_data_source_proto_rawDescGZIP(), []int{6}
}

func (x *NativeBalanceRequest) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *NativeBalanceRequest) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

type NativeBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance      *U128     `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	ErrorCode    ErrorCode `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3,enum=dfinance.dvm.ErrorCode" json:"error_code,omitempty"`
	ErrorMessage string    `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // error message from libra, empty if ErrorCode::None
}

func (x *NativeBalanceResponse) Reset() {
	*x = NativeBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_data_source_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeBalanceResponse) ProtoMessage() {}

func (x *NativeBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_data_source_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeBalanceResponse.ProtoReflect.Descriptor instead.
func (*NativeBalanceResponse) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_data_source_proto_rawDescGZIP(), []int{7}
}

func (x *NativeBalanceResponse) GetBalance() *U128 {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *NativeBalanceResponse) GetErrorCode() ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCode_NONE
}

func (x *NativeBalanceResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type CurrencyInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker string `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
}

func (x *CurrencyInfoRequest) Reset() {
	*x = CurrencyInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_data_source_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyInfoRequest) ProtoMessage() {}

func (x *CurrencyInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_data_source_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyInfoRequest.ProtoReflect.Descriptor instead.
func (*CurrencyInfoRequest) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_data_source_proto_rawDescGZIP(), []int{8}
}

func (x *CurrencyInfoRequest) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

type CurrencyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Denom       []byte `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Decimals    uint32 `protobuf:"varint,2,opt,name=decimals,proto3" json:"decimals,omitempty"`
	IsToken     bool   `protobuf:"varint,3,opt,name=is_token,json=isToken,proto3" json:"is_token,omitempty"`
	Address     []byte `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	TotalSupply *U128  `protobuf:"bytes,5,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
}

func (x *CurrencyInfo) Reset() {
	*x = CurrencyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_data_source_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyInfo) ProtoMessage() {}

func (x *CurrencyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_data_source_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyInfo.ProtoReflect.Descriptor instead.
func (*CurrencyInfo) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_data_source_proto_rawDescGZIP(), []int{9}
}

func (x *CurrencyInfo) GetDenom() []byte {
	if x != nil {
		return x.Denom
	}
	return nil
}

func (x *CurrencyInfo) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *CurrencyInfo) GetIsToken() bool {
	if x != nil {
		return x.IsToken
	}
	return false
}

func (x *CurrencyInfo) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *CurrencyInfo) GetTotalSupply() *U128 {
	if x != nil {
		return x.TotalSupply
	}
	return nil
}

type CurrencyInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info         *CurrencyInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	ErrorCode    ErrorCode     `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3,enum=dfinance.dvm.ErrorCode" json:"error_code,omitempty"`
	ErrorMessage string        `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // error message from libra, empty if ErrorCode::None
}

func (x *CurrencyInfoResponse) Reset() {
	*x = CurrencyInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_data_source_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyInfoResponse) ProtoMessage() {}

func (x *CurrencyInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_data_source_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyInfoResponse.ProtoReflect.Descriptor instead.
func (*CurrencyInfoResponse) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_data_source_proto_rawDescGZIP(), []int{10}
}

func (x *CurrencyInfoResponse) GetInfo() *CurrencyInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CurrencyInfoResponse) GetErrorCode() ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCode_NONE
}

func (x *CurrencyInfoResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_dfinance_dvm_data_source_proto protoreflect.FileDescriptor

var file_dfinance_dvm_data_source_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x64, 0x76, 0x6d, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0c, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x1a, 0x1f,
	0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x64, 0x76, 0x6d, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x3c, 0x0a, 0x0c, 0x44, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x80, 0x01,
	0x0a, 0x0d, 0x44, 0x53, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62,
	0x6c, 0x6f, 0x62, 0x12, 0x36, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x41, 0x0a, 0x0d, 0x44, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e,
	0x44, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x22, 0x26, 0x0a, 0x0e, 0x44, 0x53, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x22, 0x52, 0x0a, 0x12, 0x4f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x31,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x32, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x32, 0x22,
	0x9c, 0x01, 0x0a, 0x13, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x75, 0x31, 0x32, 0x38, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x36, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x48,
	0x0a, 0x14, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64,
	0x76, 0x6d, 0x2e, 0x75, 0x31, 0x32, 0x38, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x36, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x64, 0x76, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2d, 0x0a,
	0x13, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x22, 0xac, 0x01, 0x0a,
	0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x64, 0x65,
	0x6e, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x75, 0x31, 0x32, 0x38, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x22, 0xa3, 0x01, 0x0a, 0x14,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76,
	0x6d, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2a, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x10, 0x02, 0x32, 0xb0, 0x03, 0x0a, 0x09, 0x44, 0x53, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x12, 0x1a,
	0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x44, 0x53,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x1b, 0x2e, 0x64, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x44, 0x53, 0x52, 0x61, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x12, 0x1b, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x44, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x1c, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x44, 0x53, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x64, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x22, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76,
	0x6d, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x21, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64,
	0x76, 0x6d, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2f, 0x64, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x64, 0x76, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dfinance_dvm_data_source_proto_rawDescOnce sync.Once
	file_dfinance_dvm_data_source_proto_rawDescData = file_dfinance_dvm_data_source_proto_rawDesc
)

func file_dfinance_dvm_data_source_proto_rawDescGZIP() []byte {
	file_dfinance_dvm_data_source_proto_rawDescOnce.Do(func() {
		file_dfinance_dvm_data_source_proto_rawDescData = protoimpl.X.CompressGZIP(file_dfinance_dvm_data_source_proto_rawDescData)
	})
	return file_dfinance_dvm_data_source_proto_rawDescData
}

var file_dfinance_dvm_data_source_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dfinance_dvm_data_source_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_dfinance_dvm_data_source_proto_goTypes = []interface{}{
	(ErrorCode)(0),                // 0: dfinance.dvm.ErrorCode
	(*DSAccessPath)(nil),          // 1: dfinance.dvm.DSAccessPath
	(*DSRawResponse)(nil),         // 2: dfinance.dvm.DSRawResponse
	(*DSAccessPaths)(nil),         // 3: dfinance.dvm.DSAccessPaths
	(*DSRawResponses)(nil),        // 4: dfinance.dvm.DSRawResponses
	(*OraclePriceRequest)(nil),    // 5: dfinance.dvm.OraclePriceRequest
	(*OraclePriceResponse)(nil),   // 6: dfinance.dvm.OraclePriceResponse
	(*NativeBalanceRequest)(nil),  // 7: dfinance.dvm.NativeBalanceRequest
	(*NativeBalanceResponse)(nil), // 8: dfinance.dvm.NativeBalanceResponse
	(*CurrencyInfoRequest)(nil),   // 9: dfinance.dvm.CurrencyInfoRequest
	(*CurrencyInfo)(nil),          // 10: dfinance.dvm.CurrencyInfo
	(*CurrencyInfoResponse)(nil),  // 11: dfinance.dvm.CurrencyInfoResponse
	(*U128)(nil),                  // 12: dfinance.dvm.u128
}
var file_dfinance_dvm_data_source_proto_depIdxs = []int32{
	0,  // 0: dfinance.dvm.DSRawResponse.error_code:type_name -> dfinance.dvm.ErrorCode
	1,  // 1: dfinance.dvm.DSAccessPaths.paths:type_name -> dfinance.dvm.DSAccessPath
	12, // 2: dfinance.dvm.OraclePriceResponse.price:type_name -> dfinance.dvm.u128
	0,  // 3: dfinance.dvm.OraclePriceResponse.error_code:type_name -> dfinance.dvm.ErrorCode
	12, // 4: dfinance.dvm.NativeBalanceResponse.balance:type_name -> dfinance.dvm.u128
	0,  // 5: dfinance.dvm.NativeBalanceResponse.error_code:type_name -> dfinance.dvm.ErrorCode
	12, // 6: dfinance.dvm.CurrencyInfo.total_supply:type_name -> dfinance.dvm.u128
	10, // 7: dfinance.dvm.CurrencyInfoResponse.info:type_name -> dfinance.dvm.CurrencyInfo
	0,  // 8: dfinance.dvm.CurrencyInfoResponse.error_code:type_name -> dfinance.dvm.ErrorCode
	1,  // 9: dfinance.dvm.DSService.GetRaw:input_type -> dfinance.dvm.DSAccessPath
	3,  // 10: dfinance.dvm.DSService.MultiGetRaw:input_type -> dfinance.dvm.DSAccessPaths
	5,  // 11: dfinance.dvm.DSService.GetOraclePrice:input_type -> dfinance.dvm.OraclePriceRequest
	7,  // 12: dfinance.dvm.DSService.GetNativeBalance:input_type -> dfinance.dvm.NativeBalanceRequest
	9,  // 13: dfinance.dvm.DSService.GetCurrencyInfo:input_type -> dfinance.dvm.CurrencyInfoRequest
	2,  // 14: dfinance.dvm.DSService.GetRaw:output_type -> dfinance.dvm.DSRawResponse
	4,  // 15: dfinance.dvm.DSService.MultiGetRaw:output_type -> dfinance.dvm.DSRawResponses
	6,  // 16: dfinance.dvm.DSService.GetOraclePrice:output_type -> dfinance.dvm.OraclePriceResponse
	8,  // 17: dfinance.dvm.DSService.GetNativeBalance:output_type -> dfinance.dvm.NativeBalanceResponse
	11, // 18: dfinance.dvm.DSService.GetCurrencyInfo:output_type -> dfinance.dvm.CurrencyInfoResponse
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_dfinance_dvm_data_source_proto_init() }
func file_dfinance_dvm_data_source_proto_init() {
	if File_dfinance_dvm_data_source_proto != nil {
		return
	}
	file_dfinance_dvm_common_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dfinance_dvm_data_source_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DSAccessPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_data_source_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DSRawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_data_source_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DSAccessPaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_data_source_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DSRawResponses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_data_source_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OraclePriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_data_source_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OraclePriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_data_source_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_data_source_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_data_source_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_data_source_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_data_source_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dfinance_dvm_data_source_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dfinance_dvm_data_source_proto_goTypes,
		DependencyIndexes: file_dfinance_dvm_data_source_proto_depIdxs,
		EnumInfos:         file_dfinance_dvm_data_source_proto_enumTypes,
		MessageInfos:      file_dfinance_dvm_data_source_proto_msgTypes,
	}.Build()
	File_dfinance_dvm_data_source_proto = out.File
	file_dfinance_dvm_data_source_proto_rawDesc = nil
	file_dfinance_dvm_data_source_proto_goTypes = nil
	file_dfinance_dvm_data_source_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DSServiceClient is the client API for DSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DSServiceClient interface {
	GetRaw(ctx context.Context, in *DSAccessPath, opts ...grpc.CallOption) (*DSRawResponse, error)
	MultiGetRaw(ctx context.Context, in *DSAccessPaths, opts ...grpc.CallOption) (*DSRawResponses, error)
	GetOraclePrice(ctx context.Context, in *OraclePriceRequest, opts ...grpc.CallOption) (*OraclePriceResponse, error)
	GetNativeBalance(ctx context.Context, in *NativeBalanceRequest, opts ...grpc.CallOption) (*NativeBalanceResponse, error)
	GetCurrencyInfo(ctx context.Context, in *CurrencyInfoRequest, opts ...grpc.CallOption) (*CurrencyInfoResponse, error)
}

type dSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDSServiceClient(cc grpc.ClientConnInterface) DSServiceClient {
	return &dSServiceClient{cc}
}

func (c *dSServiceClient) GetRaw(ctx context.Context, in *DSAccessPath, opts ...grpc.CallOption) (*DSRawResponse, error) {
	out := new(DSRawResponse)
	err := c.cc.Invoke(ctx, "/dfinance.dvm.DSService/GetRaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSServiceClient) MultiGetRaw(ctx context.Context, in *DSAccessPaths, opts ...grpc.CallOption) (*DSRawResponses, error) {
	out := new(DSRawResponses)
	err := c.cc.Invoke(ctx, "/dfinance.dvm.DSService/MultiGetRaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSServiceClient) GetOraclePrice(ctx context.Context, in *OraclePriceRequest, opts ...grpc.CallOption) (*OraclePriceResponse, error) {
	out := new(OraclePriceResponse)
	err := c.cc.Invoke(ctx, "/dfinance.dvm.DSService/GetOraclePrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSServiceClient) GetNativeBalance(ctx context.Context, in *NativeBalanceRequest, opts ...grpc.CallOption) (*NativeBalanceResponse, error) {
	out := new(NativeBalanceResponse)
	err := c.cc.Invoke(ctx, "/dfinance.dvm.DSService/GetNativeBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSServiceClient) GetCurrencyInfo(ctx context.Context, in *CurrencyInfoRequest, opts ...grpc.CallOption) (*CurrencyInfoResponse, error) {
	out := new(CurrencyInfoResponse)
	err := c.cc.Invoke(ctx, "/dfinance.dvm.DSService/GetCurrencyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DSServiceServer is the server API for DSService service.
type DSServiceServer interface {
	GetRaw(context.Context, *DSAccessPath) (*DSRawResponse, error)
	MultiGetRaw(context.Context, *DSAccessPaths) (*DSRawResponses, error)
	GetOraclePrice(context.Context, *OraclePriceRequest) (*OraclePriceResponse, error)
	GetNativeBalance(context.Context, *NativeBalanceRequest) (*NativeBalanceResponse, error)
	GetCurrencyInfo(context.Context, *CurrencyInfoRequest) (*CurrencyInfoResponse, error)
}

// UnimplementedDSServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDSServiceServer struct {
}

func (*UnimplementedDSServiceServer) GetRaw(context.Context, *DSAccessPath) (*DSRawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaw not implemented")
}
func (*UnimplementedDSServiceServer) MultiGetRaw(context.Context, *DSAccessPaths) (*DSRawResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiGetRaw not implemented")
}
func (*UnimplementedDSServiceServer) GetOraclePrice(context.Context, *OraclePriceRequest) (*OraclePriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOraclePrice not implemented")
}
func (*UnimplementedDSServiceServer) GetNativeBalance(context.Context, *NativeBalanceRequest) (*NativeBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNativeBalance not implemented")
}
func (*UnimplementedDSServiceServer) GetCurrencyInfo(context.Context, *CurrencyInfoRequest) (*CurrencyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencyInfo not implemented")
}

func RegisterDSServiceServer(s *grpc.Server, srv DSServiceServer) {
	s.RegisterService(&_DSService_serviceDesc, srv)
}

func _DSService_GetRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DSAccessPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSServiceServer).GetRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfinance.dvm.DSService/GetRaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSServiceServer).GetRaw(ctx, req.(*DSAccessPath))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSService_MultiGetRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DSAccessPaths)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSServiceServer).MultiGetRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfinance.dvm.DSService/MultiGetRaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSServiceServer).MultiGetRaw(ctx, req.(*DSAccessPaths))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSService_GetOraclePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OraclePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSServiceServer).GetOraclePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfinance.dvm.DSService/GetOraclePrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSServiceServer).GetOraclePrice(ctx, req.(*OraclePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSService_GetNativeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NativeBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSServiceServer).GetNativeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfinance.dvm.DSService/GetNativeBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSServiceServer).GetNativeBalance(ctx, req.(*NativeBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSService_GetCurrencyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSServiceServer).GetCurrencyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfinance.dvm.DSService/GetCurrencyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSServiceServer).GetCurrencyInfo(ctx, req.(*CurrencyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfinance.dvm.DSService",
	HandlerType: (*DSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRaw",
			Handler:    _DSService_GetRaw_Handler,
		},
		{
			MethodName: "MultiGetRaw",
			Handler:    _DSService_MultiGetRaw_Handler,
		},
		{
			MethodName: "GetOraclePrice",
			Handler:    _DSService_GetOraclePrice_Handler,
		},
		{
			MethodName: "GetNativeBalance",
			Handler:    _DSService_GetNativeBalance_Handler,
		},
		{
			MethodName: "GetCurrencyInfo",
			Handler:    _DSService_GetCurrencyInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dfinance/dvm/data-source.proto",
}
