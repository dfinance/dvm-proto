// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.13.0
// source: dfinance/dvm/vm.proto

package dvm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LcsType int32

const (
	LcsType_LcsBool    LcsType = 0 // Bool
	LcsType_LcsU64     LcsType = 1 // Uint64
	LcsType_LcsVector  LcsType = 2 // Vector of bytes.
	LcsType_LcsAddress LcsType = 3 // Address, in bech32 form
	LcsType_LcsU8      LcsType = 4 // U8
	LcsType_LcsU128    LcsType = 5 // U128
	LcsType_LcsSigner  LcsType = 6 // Signer.
	LcsType_LcsStruct  LcsType = 7 // Struct.
)

// Enum value maps for LcsType.
var (
	LcsType_name = map[int32]string{
		0: "LcsBool",
		1: "LcsU64",
		2: "LcsVector",
		3: "LcsAddress",
		4: "LcsU8",
		5: "LcsU128",
		6: "LcsSigner",
		7: "LcsStruct",
	}
	LcsType_value = map[string]int32{
		"LcsBool":    0,
		"LcsU64":     1,
		"LcsVector":  2,
		"LcsAddress": 3,
		"LcsU8":      4,
		"LcsU128":    5,
		"LcsSigner":  6,
		"LcsStruct":  7,
	}
)

func (x LcsType) Enum() *LcsType {
	p := new(LcsType)
	*p = x
	return p
}

func (x LcsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LcsType) Descriptor() protoreflect.EnumDescriptor {
	return file_dfinance_dvm_vm_proto_enumTypes[0].Descriptor()
}

func (LcsType) Type() protoreflect.EnumType {
	return &file_dfinance_dvm_vm_proto_enumTypes[0]
}

func (x LcsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LcsType.Descriptor instead.
func (LcsType) EnumDescriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{0}
}

// Write set operation type.
type VmWriteOp int32

const (
	VmWriteOp_Value    VmWriteOp = 0 // Insert or update value
	VmWriteOp_Deletion VmWriteOp = 1 // Delete.
)

// Enum value maps for VmWriteOp.
var (
	VmWriteOp_name = map[int32]string{
		0: "Value",
		1: "Deletion",
	}
	VmWriteOp_value = map[string]int32{
		"Value":    0,
		"Deletion": 1,
	}
)

func (x VmWriteOp) Enum() *VmWriteOp {
	p := new(VmWriteOp)
	*p = x
	return p
}

func (x VmWriteOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VmWriteOp) Descriptor() protoreflect.EnumDescriptor {
	return file_dfinance_dvm_vm_proto_enumTypes[1].Descriptor()
}

func (VmWriteOp) Type() protoreflect.EnumType {
	return &file_dfinance_dvm_vm_proto_enumTypes[1]
}

func (x VmWriteOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VmWriteOp.Descriptor instead.
func (VmWriteOp) EnumDescriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{1}
}

// An `AbortLocation` specifies where a Move program `abort` occurred, either in a function in
// a module, or in a script.
type AbortLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // Indicates `abort` occurred in the specified module.
	Module  string `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`   // Indicates the `abort` occurred in a script.
}

func (x *AbortLocation) Reset() {
	*x = AbortLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_vm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortLocation) ProtoMessage() {}

func (x *AbortLocation) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_vm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortLocation.ProtoReflect.Descriptor instead.
func (*AbortLocation) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{0}
}

func (x *AbortLocation) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AbortLocation) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

// Function location.
type FunctionLoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function   uint64 `protobuf:"varint,1,opt,name=function,proto3" json:"function,omitempty"`                       // Function index.
	CodeOffset uint64 `protobuf:"varint,2,opt,name=code_offset,json=codeOffset,proto3" json:"code_offset,omitempty"` // Code offset.
}

func (x *FunctionLoc) Reset() {
	*x = FunctionLoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_vm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionLoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionLoc) ProtoMessage() {}

func (x *FunctionLoc) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_vm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionLoc.ProtoReflect.Descriptor instead.
func (*FunctionLoc) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{1}
}

func (x *FunctionLoc) GetFunction() uint64 {
	if x != nil {
		return x.Function
	}
	return 0
}

func (x *FunctionLoc) GetCodeOffset() uint64 {
	if x != nil {
		return x.CodeOffset
	}
	return 0
}

// VmStatus `Error` case.
type MoveError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status code.
	StatusCode uint64 `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
}

func (x *MoveError) Reset() {
	*x = MoveError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_vm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveError) ProtoMessage() {}

func (x *MoveError) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_vm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveError.ProtoReflect.Descriptor instead.
func (*MoveError) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{2}
}

func (x *MoveError) GetStatusCode() uint64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

// VmStatus `MoveAbort` case.
type Abort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Abort location. (optional). Null if abort occurred in the script.
	AbortLocation *AbortLocation `protobuf:"bytes,1,opt,name=abort_location,json=abortLocation,proto3" json:"abort_location,omitempty"`
	// Abort code.
	AbortCode uint64 `protobuf:"varint,2,opt,name=abort_code,json=abortCode,proto3" json:"abort_code,omitempty"`
}

func (x *Abort) Reset() {
	*x = Abort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_vm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Abort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Abort) ProtoMessage() {}

func (x *Abort) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_vm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Abort.ProtoReflect.Descriptor instead.
func (*Abort) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{3}
}

func (x *Abort) GetAbortLocation() *AbortLocation {
	if x != nil {
		return x.AbortLocation
	}
	return nil
}

func (x *Abort) GetAbortCode() uint64 {
	if x != nil {
		return x.AbortCode
	}
	return 0
}

// VmStatus `ExecutionFailure` case.
type Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status code.
	StatusCode uint64 `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	// Abort location. (optional). Null if abort occurred in the script.
	AbortLocation *AbortLocation `protobuf:"bytes,2,opt,name=abort_location,json=abortLocation,proto3" json:"abort_location,omitempty"`
	// Function location.
	FunctionLoc *FunctionLoc `protobuf:"bytes,3,opt,name=function_loc,json=functionLoc,proto3" json:"function_loc,omitempty"`
}

func (x *Failure) Reset() {
	*x = Failure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_vm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Failure) ProtoMessage() {}

func (x *Failure) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_vm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Failure.ProtoReflect.Descriptor instead.
func (*Failure) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{4}
}

func (x *Failure) GetStatusCode() uint64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *Failure) GetAbortLocation() *AbortLocation {
	if x != nil {
		return x.AbortLocation
	}
	return nil
}

func (x *Failure) GetFunctionLoc() *FunctionLoc {
	if x != nil {
		return x.FunctionLoc
	}
	return nil
}

/// Message.
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message with error details if needed.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_vm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_vm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{5}
}

func (x *Message) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// A `VMStatus` is represented as either
// - `Null` indicating successful execution.
// - `Error` indicating an error from the VM itself.
// - `MoveAbort` indicating an `abort` ocurred inside of a Move program
// - `ExecutionFailure` indicating an runtime error.
type VMStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Error:
	//	*VMStatus_MoveError
	//	*VMStatus_Abort
	//	*VMStatus_ExecutionFailure
	Error isVMStatus_Error `protobuf_oneof:"error"`
	// Message with error details if needed (optional).
	Message *Message `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *VMStatus) Reset() {
	*x = VMStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_vm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMStatus) ProtoMessage() {}

func (x *VMStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_vm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMStatus.ProtoReflect.Descriptor instead.
func (*VMStatus) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{6}
}

func (m *VMStatus) GetError() isVMStatus_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (x *VMStatus) GetMoveError() *MoveError {
	if x, ok := x.GetError().(*VMStatus_MoveError); ok {
		return x.MoveError
	}
	return nil
}

func (x *VMStatus) GetAbort() *Abort {
	if x, ok := x.GetError().(*VMStatus_Abort); ok {
		return x.Abort
	}
	return nil
}

func (x *VMStatus) GetExecutionFailure() *Failure {
	if x, ok := x.GetError().(*VMStatus_ExecutionFailure); ok {
		return x.ExecutionFailure
	}
	return nil
}

func (x *VMStatus) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type isVMStatus_Error interface {
	isVMStatus_Error()
}

type VMStatus_MoveError struct {
	// Indicates an error from the VM, e.g. OUT_OF_GAS, INVALID_AUTH_KEY, RET_TYPE_MISMATCH_ERROR
	// etc.
	// The code will neither EXECUTED nor ABORTED
	MoveError *MoveError `protobuf:"bytes,1,opt,name=move_error,json=moveError,proto3,oneof"`
}

type VMStatus_Abort struct {
	// Indicates an error from the VM, e.g. OUT_OF_GAS, INVALID_AUTH_KEY, RET_TYPE_MISMATCH_ERROR
	// etc.
	// The code will neither EXECUTED nor ABORTED
	Abort *Abort `protobuf:"bytes,2,opt,name=abort,proto3,oneof"`
}

type VMStatus_ExecutionFailure struct {
	// Indicates an failure from inside Move code, where the VM could not continue exection, e.g.
	// dividing by zero or a missing resource
	ExecutionFailure *Failure `protobuf:"bytes,3,opt,name=execution_failure,json=executionFailure,proto3,oneof"`
}

func (*VMStatus_MoveError) isVMStatus_Error() {}

func (*VMStatus_Abort) isVMStatus_Error() {}

func (*VMStatus_ExecutionFailure) isVMStatus_Error() {}

/// Full name of the structure.
type StructIdent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    []byte    `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`                         // address of module owner
	Module     string    `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`                           // module name.
	Name       string    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                               // name of structure.
	TypeParams []*LcsTag `protobuf:"bytes,4,rep,name=type_params,json=typeParams,proto3" json:"type_params,omitempty"` // Structure type parameters.
}

func (x *StructIdent) Reset() {
	*x = StructIdent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_vm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructIdent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructIdent) ProtoMessage() {}

func (x *StructIdent) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_vm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructIdent.ProtoReflect.Descriptor instead.
func (*StructIdent) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{7}
}

func (x *StructIdent) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *StructIdent) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *StructIdent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StructIdent) GetTypeParams() []*LcsTag {
	if x != nil {
		return x.TypeParams
	}
	return nil
}

type LcsTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeTag     LcsType      `protobuf:"varint,1,opt,name=type_tag,json=typeTag,proto3,enum=dfinance.dvm.LcsType" json:"type_tag,omitempty"` // type tag.
	VectorType  *LcsTag      `protobuf:"bytes,2,opt,name=vector_type,json=vectorType,proto3" json:"vector_type,omitempty"`                   // vector type. Has a non-null value if the type_tag is equal to a LcsVector.
	StructIdent *StructIdent `protobuf:"bytes,3,opt,name=struct_ident,json=structIdent,proto3" json:"struct_ident,omitempty"`                // struct identifier. Has a non-null value if the type_tag is equal to a LcsStruct.
}

func (x *LcsTag) Reset() {
	*x = LcsTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_vm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LcsTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LcsTag) ProtoMessage() {}

func (x *LcsTag) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_vm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LcsTag.ProtoReflect.Descriptor instead.
func (*LcsTag) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{8}
}

func (x *LcsTag) GetTypeTag() LcsType {
	if x != nil {
		return x.TypeTag
	}
	return LcsType_LcsBool
}

func (x *LcsTag) GetVectorType() *LcsTag {
	if x != nil {
		return x.VectorType
	}
	return nil
}

func (x *LcsTag) GetStructIdent() *StructIdent {
	if x != nil {
		return x.StructIdent
	}
	return nil
}

/// Module identifier.
type ModuleIdent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // module address.
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`       // module name.
}

func (x *ModuleIdent) Reset() {
	*x = ModuleIdent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_vm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleIdent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleIdent) ProtoMessage() {}

func (x *ModuleIdent) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_vm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleIdent.ProtoReflect.Descriptor instead.
func (*ModuleIdent) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{9}
}

func (x *ModuleIdent) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ModuleIdent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// VM event returns after contract execution.
type VMEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderAddress []byte       `protobuf:"bytes,1,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"` // Event sender address.
	SenderModule  *ModuleIdent `protobuf:"bytes,2,opt,name=sender_module,json=senderModule,proto3" json:"sender_module,omitempty"`    // sender module.
	EventType     *LcsTag      `protobuf:"bytes,3,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`             // Type of value inside event.
	EventData     []byte       `protobuf:"bytes,4,opt,name=event_data,json=eventData,proto3" json:"event_data,omitempty"`             // Event data in bytes to parse.
}

func (x *VMEvent) Reset() {
	*x = VMEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_vm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMEvent) ProtoMessage() {}

func (x *VMEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_vm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMEvent.ProtoReflect.Descriptor instead.
func (*VMEvent) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{10}
}

func (x *VMEvent) GetSenderAddress() []byte {
	if x != nil {
		return x.SenderAddress
	}
	return nil
}

func (x *VMEvent) GetSenderModule() *ModuleIdent {
	if x != nil {
		return x.SenderModule
	}
	return nil
}

func (x *VMEvent) GetEventType() *LcsTag {
	if x != nil {
		return x.EventType
	}
	return nil
}

func (x *VMEvent) GetEventData() []byte {
	if x != nil {
		return x.EventData
	}
	return nil
}

// Storage path
type VMAccessPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // account address.
	Path    []byte `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`       // storage path.
}

func (x *VMAccessPath) Reset() {
	*x = VMAccessPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_vm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMAccessPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMAccessPath) ProtoMessage() {}

func (x *VMAccessPath) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_vm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMAccessPath.ProtoReflect.Descriptor instead.
func (*VMAccessPath) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{11}
}

func (x *VMAccessPath) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *VMAccessPath) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

// VM value should be passed before execution and return after execution (with opcodes), write_set in nutshell.
type VMValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  VmWriteOp     `protobuf:"varint,2,opt,name=type,proto3,enum=dfinance.dvm.VmWriteOp" json:"type,omitempty"` // Type of operation
	Value []byte        `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`                            // Value returns from vm.
	Path  *VMAccessPath `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`                              // Access path.
}

func (x *VMValue) Reset() {
	*x = VMValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_vm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMValue) ProtoMessage() {}

func (x *VMValue) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_vm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMValue.ProtoReflect.Descriptor instead.
func (*VMValue) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{12}
}

func (x *VMValue) GetType() VmWriteOp {
	if x != nil {
		return x.Type
	}
	return VmWriteOp_Value
}

func (x *VMValue) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *VMValue) GetPath() *VMAccessPath {
	if x != nil {
		return x.Path
	}
	return nil
}

// Contract arguments.
type VMArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  VMTypeTag `protobuf:"varint,1,opt,name=type,proto3,enum=dfinance.dvm.VMTypeTag" json:"type,omitempty"` // Argument type.
	Value []byte    `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`                            // Argument value.
}

func (x *VMArgs) Reset() {
	*x = VMArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_vm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMArgs) ProtoMessage() {}

func (x *VMArgs) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_vm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMArgs.ProtoReflect.Descriptor instead.
func (*VMArgs) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{13}
}

func (x *VMArgs) GetType() VMTypeTag {
	if x != nil {
		return x.Type
	}
	return VMTypeTag_Bool
}

func (x *VMArgs) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Publish module.
type VMPublishModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender       []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`                                    // owner of contract.
	MaxGasAmount uint64 `protobuf:"varint,2,opt,name=max_gas_amount,json=maxGasAmount,proto3" json:"max_gas_amount,omitempty"` // maximal total gas specified by wallet to spend for this transaction.
	GasUnitPrice uint64 `protobuf:"varint,3,opt,name=gas_unit_price,json=gasUnitPrice,proto3" json:"gas_unit_price,omitempty"` // maximal price can be paid per gas.
	Code         []byte `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`                                        // compiled contract code.
}

func (x *VMPublishModule) Reset() {
	*x = VMPublishModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_vm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMPublishModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMPublishModule) ProtoMessage() {}

func (x *VMPublishModule) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_vm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMPublishModule.ProtoReflect.Descriptor instead.
func (*VMPublishModule) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{14}
}

func (x *VMPublishModule) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *VMPublishModule) GetMaxGasAmount() uint64 {
	if x != nil {
		return x.MaxGasAmount
	}
	return 0
}

func (x *VMPublishModule) GetGasUnitPrice() uint64 {
	if x != nil {
		return x.GasUnitPrice
	}
	return 0
}

func (x *VMPublishModule) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

// VM contract object to process.
type VMExecuteScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Senders      [][]byte       `protobuf:"bytes,1,rep,name=senders,proto3" json:"senders,omitempty"`                                  // owners of contract.
	MaxGasAmount uint64         `protobuf:"varint,2,opt,name=max_gas_amount,json=maxGasAmount,proto3" json:"max_gas_amount,omitempty"` // maximal total gas specified by wallet to spend for this transaction.
	GasUnitPrice uint64         `protobuf:"varint,3,opt,name=gas_unit_price,json=gasUnitPrice,proto3" json:"gas_unit_price,omitempty"` // maximal price can be paid per gas.
	Block        uint64         `protobuf:"varint,4,opt,name=block,proto3" json:"block,omitempty"`                                     // block.
	Timestamp    uint64         `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                             // timestamp.
	Code         []byte         `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`                                        // compiled contract code.
	TypeParams   []*StructIdent `protobuf:"bytes,7,rep,name=type_params,json=typeParams,proto3" json:"type_params,omitempty"`          // type parameters.
	Args         []*VMArgs      `protobuf:"bytes,8,rep,name=args,proto3" json:"args,omitempty"`                                        // Contract arguments.
}

func (x *VMExecuteScript) Reset() {
	*x = VMExecuteScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_vm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMExecuteScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMExecuteScript) ProtoMessage() {}

func (x *VMExecuteScript) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_vm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMExecuteScript.ProtoReflect.Descriptor instead.
func (*VMExecuteScript) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{15}
}

func (x *VMExecuteScript) GetSenders() [][]byte {
	if x != nil {
		return x.Senders
	}
	return nil
}

func (x *VMExecuteScript) GetMaxGasAmount() uint64 {
	if x != nil {
		return x.MaxGasAmount
	}
	return 0
}

func (x *VMExecuteScript) GetGasUnitPrice() uint64 {
	if x != nil {
		return x.GasUnitPrice
	}
	return 0
}

func (x *VMExecuteScript) GetBlock() uint64 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (x *VMExecuteScript) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *VMExecuteScript) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *VMExecuteScript) GetTypeParams() []*StructIdent {
	if x != nil {
		return x.TypeParams
	}
	return nil
}

func (x *VMExecuteScript) GetArgs() []*VMArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type VMBalanceChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Ticker  string `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// Types that are assignable to Op:
	//	*VMBalanceChange_Deposit
	//	*VMBalanceChange_Withdraw
	Op isVMBalanceChange_Op `protobuf_oneof:"op"`
}

func (x *VMBalanceChange) Reset() {
	*x = VMBalanceChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_vm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMBalanceChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMBalanceChange) ProtoMessage() {}

func (x *VMBalanceChange) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_vm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMBalanceChange.ProtoReflect.Descriptor instead.
func (*VMBalanceChange) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{16}
}

func (x *VMBalanceChange) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *VMBalanceChange) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (m *VMBalanceChange) GetOp() isVMBalanceChange_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (x *VMBalanceChange) GetDeposit() *U128 {
	if x, ok := x.GetOp().(*VMBalanceChange_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (x *VMBalanceChange) GetWithdraw() *U128 {
	if x, ok := x.GetOp().(*VMBalanceChange_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

type isVMBalanceChange_Op interface {
	isVMBalanceChange_Op()
}

type VMBalanceChange_Deposit struct {
	Deposit *U128 `protobuf:"bytes,3,opt,name=deposit,proto3,oneof"`
}

type VMBalanceChange_Withdraw struct {
	Withdraw *U128 `protobuf:"bytes,4,opt,name=withdraw,proto3,oneof"`
}

func (*VMBalanceChange_Deposit) isVMBalanceChange_Op() {}

func (*VMBalanceChange_Withdraw) isVMBalanceChange_Op() {}

type VMBalanceChangeSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeSet []*VMBalanceChange `protobuf:"bytes,1,rep,name=change_set,json=changeSet,proto3" json:"change_set,omitempty"`
}

func (x *VMBalanceChangeSet) Reset() {
	*x = VMBalanceChangeSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_vm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMBalanceChangeSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMBalanceChangeSet) ProtoMessage() {}

func (x *VMBalanceChangeSet) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_vm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMBalanceChangeSet.ProtoReflect.Descriptor instead.
func (*VMBalanceChangeSet) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{17}
}

func (x *VMBalanceChangeSet) GetChangeSet() []*VMBalanceChange {
	if x != nil {
		return x.ChangeSet
	}
	return nil
}

// Response from VM contains write_set, events, gas used and status for specific contract.
type VMExecuteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WriteSet         []*VMValue         `protobuf:"bytes,1,rep,name=write_set,json=writeSet,proto3" json:"write_set,omitempty"`                           // using string instead of bytes for now, as map support only ints and strings as keys
	Events           []*VMEvent         `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`                                               // list of events executed during contract execution
	BalanceChangeSet []*VMBalanceChange `protobuf:"bytes,3,rep,name=balance_change_set,json=balanceChangeSet,proto3" json:"balance_change_set,omitempty"` // list of native balance updates.
	GasUsed          uint64             `protobuf:"varint,4,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`                             // Gas used during execution.
	Status           *VMStatus          `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`                                               // Main status of execution, might contain an error.
}

func (x *VMExecuteResponse) Reset() {
	*x = VMExecuteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_vm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMExecuteResponse) ProtoMessage() {}

func (x *VMExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_vm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMExecuteResponse.ProtoReflect.Descriptor instead.
func (*VMExecuteResponse) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{18}
}

func (x *VMExecuteResponse) GetWriteSet() []*VMValue {
	if x != nil {
		return x.WriteSet
	}
	return nil
}

func (x *VMExecuteResponse) GetEvents() []*VMEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *VMExecuteResponse) GetBalanceChangeSet() []*VMBalanceChange {
	if x != nil {
		return x.BalanceChangeSet
	}
	return nil
}

func (x *VMExecuteResponse) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *VMExecuteResponse) GetStatus() *VMStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type MultipleCompilationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units  []*CompiledUnit `protobuf:"bytes,1,rep,name=units,proto3" json:"units,omitempty"`
	Errors []string        `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"` // list of error messages, empty if successful
}

func (x *MultipleCompilationResult) Reset() {
	*x = MultipleCompilationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfinance_dvm_vm_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleCompilationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleCompilationResult) ProtoMessage() {}

func (x *MultipleCompilationResult) ProtoReflect() protoreflect.Message {
	mi := &file_dfinance_dvm_vm_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleCompilationResult.ProtoReflect.Descriptor instead.
func (*MultipleCompilationResult) Descriptor() ([]byte, []int) {
	return file_dfinance_dvm_vm_proto_rawDescGZIP(), []int{19}
}

func (x *MultipleCompilationResult) GetUnits() []*CompiledUnit {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *MultipleCompilationResult) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

var File_dfinance_dvm_vm_proto protoreflect.FileDescriptor

var file_dfinance_dvm_vm_proto_rawDesc = []byte{
	0x0a, 0x15, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x64, 0x76, 0x6d, 0x2f, 0x76,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x64, 0x76, 0x6d, 0x1a, 0x1f, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x64, 0x76, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2f, 0x64, 0x76, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x0d, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x4a, 0x0a, 0x0b, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x22, 0x2c, 0x0a, 0x09, 0x4d, 0x6f, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x6a, 0x0a, 0x05, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x61, 0x62, 0x6f,
	0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d,
	0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x61, 0x62, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xac, 0x01, 0x0a,
	0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x61, 0x62, 0x6f,
	0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d,
	0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x61, 0x62, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a,
	0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64,
	0x76, 0x6d, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x52, 0x0b,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x22, 0x1d, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xf1, 0x01, 0x0a, 0x08, 0x56,
	0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x2b, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e,
	0x41, 0x62, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x44,
	0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x48, 0x00, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8a,
	0x01, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x4c, 0x63, 0x73, 0x54, 0x61, 0x67, 0x52,
	0x0a, 0x74, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x06,
	0x4c, 0x63, 0x73, 0x54, 0x61, 0x67, 0x12, 0x30, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74,
	0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x4c, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x74, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67, 0x12, 0x35, 0x0a, 0x0b, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x4c, 0x63, 0x73,
	0x54, 0x61, 0x67, 0x52, 0x0a, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3c, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x22, 0x3b, 0x0a,
	0x0b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x07, 0x56,
	0x4d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a,
	0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x64, 0x76, 0x6d, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52,
	0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x33, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d,
	0x2e, 0x4c, 0x63, 0x73, 0x54, 0x61, 0x67, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x3c, 0x0a, 0x0c, 0x56, 0x4d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22,
	0x7c, 0x0a, 0x07, 0x56, 0x4d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x56, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f,
	0x70, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x56, 0x4d, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x4b, 0x0a,
	0x06, 0x56, 0x4d, 0x41, 0x72, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x56, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x0f, 0x56,
	0x4d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x61,
	0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x47, 0x61, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x67, 0x61, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x67, 0x61, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x0f, 0x56, 0x4d, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x61, 0x73, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x47, 0x61, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x61,
	0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x67, 0x61, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76,
	0x6d, 0x2e, 0x56, 0x4d, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xab,
	0x01, 0x0a, 0x0f, 0x56, 0x4d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x75, 0x31, 0x32, 0x38, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x75, 0x31, 0x32, 0x38, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x04, 0x0a, 0x02, 0x6f, 0x70, 0x22, 0x52, 0x0a, 0x12,
	0x56, 0x4d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x65, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x56, 0x4d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74,
	0x22, 0x8e, 0x02, 0x0a, 0x11, 0x56, 0x4d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x56, 0x4d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x56, 0x4d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x12, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x56, 0x4d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x10, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65,
	0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d,
	0x2e, 0x56, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x65, 0x0a, 0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30,
	0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2a, 0x77, 0x0a, 0x07, 0x4c, 0x63, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x63, 0x73, 0x42, 0x6f, 0x6f, 0x6c, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x63, 0x73, 0x55, 0x36, 0x34, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x4c, 0x63, 0x73, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4c,
	0x63, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4c,
	0x63, 0x73, 0x55, 0x38, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x63, 0x73, 0x55, 0x31, 0x32,
	0x38, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x63, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x63, 0x73, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x10,
	0x07, 0x2a, 0x24, 0x0a, 0x09, 0x56, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x12, 0x09,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x32, 0x66, 0x0a, 0x11, 0x56, 0x4d, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0d,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x2e,
	0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x56, 0x4d, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x1f, 0x2e, 0x64,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64, 0x76, 0x6d, 0x2e, 0x56, 0x4d, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32,
	0x65, 0x0a, 0x10, 0x56, 0x4d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x1d, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x64, 0x76, 0x6d, 0x2e, 0x56, 0x4d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x1a, 0x1f, 0x2e, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x64,
	0x76, 0x6d, 0x2e, 0x56, 0x4d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x64, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x64, 0x76, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dfinance_dvm_vm_proto_rawDescOnce sync.Once
	file_dfinance_dvm_vm_proto_rawDescData = file_dfinance_dvm_vm_proto_rawDesc
)

func file_dfinance_dvm_vm_proto_rawDescGZIP() []byte {
	file_dfinance_dvm_vm_proto_rawDescOnce.Do(func() {
		file_dfinance_dvm_vm_proto_rawDescData = protoimpl.X.CompressGZIP(file_dfinance_dvm_vm_proto_rawDescData)
	})
	return file_dfinance_dvm_vm_proto_rawDescData
}

var file_dfinance_dvm_vm_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dfinance_dvm_vm_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_dfinance_dvm_vm_proto_goTypes = []interface{}{
	(LcsType)(0),                      // 0: dfinance.dvm.LcsType
	(VmWriteOp)(0),                    // 1: dfinance.dvm.VmWriteOp
	(*AbortLocation)(nil),             // 2: dfinance.dvm.AbortLocation
	(*FunctionLoc)(nil),               // 3: dfinance.dvm.FunctionLoc
	(*MoveError)(nil),                 // 4: dfinance.dvm.MoveError
	(*Abort)(nil),                     // 5: dfinance.dvm.Abort
	(*Failure)(nil),                   // 6: dfinance.dvm.Failure
	(*Message)(nil),                   // 7: dfinance.dvm.Message
	(*VMStatus)(nil),                  // 8: dfinance.dvm.VMStatus
	(*StructIdent)(nil),               // 9: dfinance.dvm.StructIdent
	(*LcsTag)(nil),                    // 10: dfinance.dvm.LcsTag
	(*ModuleIdent)(nil),               // 11: dfinance.dvm.ModuleIdent
	(*VMEvent)(nil),                   // 12: dfinance.dvm.VMEvent
	(*VMAccessPath)(nil),              // 13: dfinance.dvm.VMAccessPath
	(*VMValue)(nil),                   // 14: dfinance.dvm.VMValue
	(*VMArgs)(nil),                    // 15: dfinance.dvm.VMArgs
	(*VMPublishModule)(nil),           // 16: dfinance.dvm.VMPublishModule
	(*VMExecuteScript)(nil),           // 17: dfinance.dvm.VMExecuteScript
	(*VMBalanceChange)(nil),           // 18: dfinance.dvm.VMBalanceChange
	(*VMBalanceChangeSet)(nil),        // 19: dfinance.dvm.VMBalanceChangeSet
	(*VMExecuteResponse)(nil),         // 20: dfinance.dvm.VMExecuteResponse
	(*MultipleCompilationResult)(nil), // 21: dfinance.dvm.MultipleCompilationResult
	(VMTypeTag)(0),                    // 22: dfinance.dvm.VMTypeTag
	(*U128)(nil),                      // 23: dfinance.dvm.u128
	(*CompiledUnit)(nil),              // 24: dfinance.dvm.CompiledUnit
}
var file_dfinance_dvm_vm_proto_depIdxs = []int32{
	2,  // 0: dfinance.dvm.Abort.abort_location:type_name -> dfinance.dvm.AbortLocation
	2,  // 1: dfinance.dvm.Failure.abort_location:type_name -> dfinance.dvm.AbortLocation
	3,  // 2: dfinance.dvm.Failure.function_loc:type_name -> dfinance.dvm.FunctionLoc
	4,  // 3: dfinance.dvm.VMStatus.move_error:type_name -> dfinance.dvm.MoveError
	5,  // 4: dfinance.dvm.VMStatus.abort:type_name -> dfinance.dvm.Abort
	6,  // 5: dfinance.dvm.VMStatus.execution_failure:type_name -> dfinance.dvm.Failure
	7,  // 6: dfinance.dvm.VMStatus.message:type_name -> dfinance.dvm.Message
	10, // 7: dfinance.dvm.StructIdent.type_params:type_name -> dfinance.dvm.LcsTag
	0,  // 8: dfinance.dvm.LcsTag.type_tag:type_name -> dfinance.dvm.LcsType
	10, // 9: dfinance.dvm.LcsTag.vector_type:type_name -> dfinance.dvm.LcsTag
	9,  // 10: dfinance.dvm.LcsTag.struct_ident:type_name -> dfinance.dvm.StructIdent
	11, // 11: dfinance.dvm.VMEvent.sender_module:type_name -> dfinance.dvm.ModuleIdent
	10, // 12: dfinance.dvm.VMEvent.event_type:type_name -> dfinance.dvm.LcsTag
	1,  // 13: dfinance.dvm.VMValue.type:type_name -> dfinance.dvm.VmWriteOp
	13, // 14: dfinance.dvm.VMValue.path:type_name -> dfinance.dvm.VMAccessPath
	22, // 15: dfinance.dvm.VMArgs.type:type_name -> dfinance.dvm.VMTypeTag
	9,  // 16: dfinance.dvm.VMExecuteScript.type_params:type_name -> dfinance.dvm.StructIdent
	15, // 17: dfinance.dvm.VMExecuteScript.args:type_name -> dfinance.dvm.VMArgs
	23, // 18: dfinance.dvm.VMBalanceChange.deposit:type_name -> dfinance.dvm.u128
	23, // 19: dfinance.dvm.VMBalanceChange.withdraw:type_name -> dfinance.dvm.u128
	18, // 20: dfinance.dvm.VMBalanceChangeSet.change_set:type_name -> dfinance.dvm.VMBalanceChange
	14, // 21: dfinance.dvm.VMExecuteResponse.write_set:type_name -> dfinance.dvm.VMValue
	12, // 22: dfinance.dvm.VMExecuteResponse.events:type_name -> dfinance.dvm.VMEvent
	18, // 23: dfinance.dvm.VMExecuteResponse.balance_change_set:type_name -> dfinance.dvm.VMBalanceChange
	8,  // 24: dfinance.dvm.VMExecuteResponse.status:type_name -> dfinance.dvm.VMStatus
	24, // 25: dfinance.dvm.MultipleCompilationResult.units:type_name -> dfinance.dvm.CompiledUnit
	16, // 26: dfinance.dvm.VMModulePublisher.PublishModule:input_type -> dfinance.dvm.VMPublishModule
	17, // 27: dfinance.dvm.VMScriptExecutor.ExecuteScript:input_type -> dfinance.dvm.VMExecuteScript
	20, // 28: dfinance.dvm.VMModulePublisher.PublishModule:output_type -> dfinance.dvm.VMExecuteResponse
	20, // 29: dfinance.dvm.VMScriptExecutor.ExecuteScript:output_type -> dfinance.dvm.VMExecuteResponse
	28, // [28:30] is the sub-list for method output_type
	26, // [26:28] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_dfinance_dvm_vm_proto_init() }
func file_dfinance_dvm_vm_proto_init() {
	if File_dfinance_dvm_vm_proto != nil {
		return
	}
	file_dfinance_dvm_common_types_proto_init()
	file_dfinance_dvm_compiler_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dfinance_dvm_vm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_vm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionLoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_vm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_vm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Abort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_vm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Failure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_vm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_vm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_vm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructIdent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_vm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LcsTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_vm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleIdent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_vm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_vm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMAccessPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_vm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_vm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_vm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMPublishModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_vm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMExecuteScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_vm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMBalanceChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_vm_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMBalanceChangeSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_vm_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMExecuteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfinance_dvm_vm_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipleCompilationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dfinance_dvm_vm_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*VMStatus_MoveError)(nil),
		(*VMStatus_Abort)(nil),
		(*VMStatus_ExecutionFailure)(nil),
	}
	file_dfinance_dvm_vm_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*VMBalanceChange_Deposit)(nil),
		(*VMBalanceChange_Withdraw)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dfinance_dvm_vm_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_dfinance_dvm_vm_proto_goTypes,
		DependencyIndexes: file_dfinance_dvm_vm_proto_depIdxs,
		EnumInfos:         file_dfinance_dvm_vm_proto_enumTypes,
		MessageInfos:      file_dfinance_dvm_vm_proto_msgTypes,
	}.Build()
	File_dfinance_dvm_vm_proto = out.File
	file_dfinance_dvm_vm_proto_rawDesc = nil
	file_dfinance_dvm_vm_proto_goTypes = nil
	file_dfinance_dvm_vm_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VMModulePublisherClient is the client API for VMModulePublisher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VMModulePublisherClient interface {
	PublishModule(ctx context.Context, in *VMPublishModule, opts ...grpc.CallOption) (*VMExecuteResponse, error)
}

type vMModulePublisherClient struct {
	cc grpc.ClientConnInterface
}

func NewVMModulePublisherClient(cc grpc.ClientConnInterface) VMModulePublisherClient {
	return &vMModulePublisherClient{cc}
}

func (c *vMModulePublisherClient) PublishModule(ctx context.Context, in *VMPublishModule, opts ...grpc.CallOption) (*VMExecuteResponse, error) {
	out := new(VMExecuteResponse)
	err := c.cc.Invoke(ctx, "/dfinance.dvm.VMModulePublisher/PublishModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMModulePublisherServer is the server API for VMModulePublisher service.
type VMModulePublisherServer interface {
	PublishModule(context.Context, *VMPublishModule) (*VMExecuteResponse, error)
}

// UnimplementedVMModulePublisherServer can be embedded to have forward compatible implementations.
type UnimplementedVMModulePublisherServer struct {
}

func (*UnimplementedVMModulePublisherServer) PublishModule(context.Context, *VMPublishModule) (*VMExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishModule not implemented")
}

func RegisterVMModulePublisherServer(s *grpc.Server, srv VMModulePublisherServer) {
	s.RegisterService(&_VMModulePublisher_serviceDesc, srv)
}

func _VMModulePublisher_PublishModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMPublishModule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMModulePublisherServer).PublishModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfinance.dvm.VMModulePublisher/PublishModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMModulePublisherServer).PublishModule(ctx, req.(*VMPublishModule))
	}
	return interceptor(ctx, in, info, handler)
}

var _VMModulePublisher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfinance.dvm.VMModulePublisher",
	HandlerType: (*VMModulePublisherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishModule",
			Handler:    _VMModulePublisher_PublishModule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dfinance/dvm/vm.proto",
}

// VMScriptExecutorClient is the client API for VMScriptExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VMScriptExecutorClient interface {
	ExecuteScript(ctx context.Context, in *VMExecuteScript, opts ...grpc.CallOption) (*VMExecuteResponse, error)
}

type vMScriptExecutorClient struct {
	cc grpc.ClientConnInterface
}

func NewVMScriptExecutorClient(cc grpc.ClientConnInterface) VMScriptExecutorClient {
	return &vMScriptExecutorClient{cc}
}

func (c *vMScriptExecutorClient) ExecuteScript(ctx context.Context, in *VMExecuteScript, opts ...grpc.CallOption) (*VMExecuteResponse, error) {
	out := new(VMExecuteResponse)
	err := c.cc.Invoke(ctx, "/dfinance.dvm.VMScriptExecutor/ExecuteScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMScriptExecutorServer is the server API for VMScriptExecutor service.
type VMScriptExecutorServer interface {
	ExecuteScript(context.Context, *VMExecuteScript) (*VMExecuteResponse, error)
}

// UnimplementedVMScriptExecutorServer can be embedded to have forward compatible implementations.
type UnimplementedVMScriptExecutorServer struct {
}

func (*UnimplementedVMScriptExecutorServer) ExecuteScript(context.Context, *VMExecuteScript) (*VMExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteScript not implemented")
}

func RegisterVMScriptExecutorServer(s *grpc.Server, srv VMScriptExecutorServer) {
	s.RegisterService(&_VMScriptExecutor_serviceDesc, srv)
}

func _VMScriptExecutor_ExecuteScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMExecuteScript)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMScriptExecutorServer).ExecuteScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfinance.dvm.VMScriptExecutor/ExecuteScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMScriptExecutorServer).ExecuteScript(ctx, req.(*VMExecuteScript))
	}
	return interceptor(ctx, in, info, handler)
}

var _VMScriptExecutor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfinance.dvm.VMScriptExecutor",
	HandlerType: (*VMScriptExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteScript",
			Handler:    _VMScriptExecutor_ExecuteScript_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dfinance/dvm/vm.proto",
}
