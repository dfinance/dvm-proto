// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0-devel
// 	protoc        v3.11.4
// source: vm.proto

package vm_grpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Type of contract (module or script).
type ContractType int32

const (
	ContractType_Module ContractType = 0 // If VM works with module.
	ContractType_Script ContractType = 1 // If VM works with script.
)

// Enum value maps for ContractType.
var (
	ContractType_name = map[int32]string{
		0: "Module",
		1: "Script",
	}
	ContractType_value = map[string]int32{
		"Module": 0,
		"Script": 1,
	}
)

func (x ContractType) Enum() *ContractType {
	p := new(ContractType)
	*p = x
	return p
}

func (x ContractType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractType) Descriptor() protoreflect.EnumDescriptor {
	return file_vm_proto_enumTypes[0].Descriptor()
}

func (ContractType) Type() protoreflect.EnumType {
	return &file_vm_proto_enumTypes[0]
}

func (x ContractType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractType.Descriptor instead.
func (ContractType) EnumDescriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{0}
}

// Status of contract execution.
type ContractStatus int32

const (
	ContractStatus_Discard ContractStatus = 0 // If transaction should be ignored, because of error.
	ContractStatus_Keep    ContractStatus = 1 // If we keep transaction and write write_set.
)

// Enum value maps for ContractStatus.
var (
	ContractStatus_name = map[int32]string{
		0: "Discard",
		1: "Keep",
	}
	ContractStatus_value = map[string]int32{
		"Discard": 0,
		"Keep":    1,
	}
)

func (x ContractStatus) Enum() *ContractStatus {
	p := new(ContractStatus)
	*p = x
	return p
}

func (x ContractStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_vm_proto_enumTypes[1].Descriptor()
}

func (ContractStatus) Type() protoreflect.EnumType {
	return &file_vm_proto_enumTypes[1]
}

func (x ContractStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractStatus.Descriptor instead.
func (ContractStatus) EnumDescriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{1}
}

// Type of value returned by event during contract execution.
type VMTypeTag int32

const (
	VMTypeTag_Bool      VMTypeTag = 0 // Bool
	VMTypeTag_U64       VMTypeTag = 1 // Uint64
	VMTypeTag_ByteArray VMTypeTag = 2 // Bytes
	VMTypeTag_Address   VMTypeTag = 3 // Address, in bech32 form
	VMTypeTag_Struct    VMTypeTag = 4 // Structure (could be several arguments for event call).
	VMTypeTag_U8        VMTypeTag = 5 // U8
	VMTypeTag_U128      VMTypeTag = 6 // U128
)

// Enum value maps for VMTypeTag.
var (
	VMTypeTag_name = map[int32]string{
		0: "Bool",
		1: "U64",
		2: "ByteArray",
		3: "Address",
		4: "Struct",
		5: "U8",
		6: "U128",
	}
	VMTypeTag_value = map[string]int32{
		"Bool":      0,
		"U64":       1,
		"ByteArray": 2,
		"Address":   3,
		"Struct":    4,
		"U8":        5,
		"U128":      6,
	}
)

func (x VMTypeTag) Enum() *VMTypeTag {
	p := new(VMTypeTag)
	*p = x
	return p
}

func (x VMTypeTag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VMTypeTag) Descriptor() protoreflect.EnumDescriptor {
	return file_vm_proto_enumTypes[2].Descriptor()
}

func (VMTypeTag) Type() protoreflect.EnumType {
	return &file_vm_proto_enumTypes[2]
}

func (x VMTypeTag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VMTypeTag.Descriptor instead.
func (VMTypeTag) EnumDescriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{2}
}

// Write set operation type.
type VmWriteOp int32

const (
	VmWriteOp_Value    VmWriteOp = 0 // Insert or update value
	VmWriteOp_Deletion VmWriteOp = 1 // Delete.
)

// Enum value maps for VmWriteOp.
var (
	VmWriteOp_name = map[int32]string{
		0: "Value",
		1: "Deletion",
	}
	VmWriteOp_value = map[string]int32{
		"Value":    0,
		"Deletion": 1,
	}
)

func (x VmWriteOp) Enum() *VmWriteOp {
	p := new(VmWriteOp)
	*p = x
	return p
}

func (x VmWriteOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VmWriteOp) Descriptor() protoreflect.EnumDescriptor {
	return file_vm_proto_enumTypes[3].Descriptor()
}

func (VmWriteOp) Type() protoreflect.EnumType {
	return &file_vm_proto_enumTypes[3]
}

func (x VmWriteOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VmWriteOp.Descriptor instead.
func (VmWriteOp) EnumDescriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{3}
}

// Status of code contract execution.
type VMStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MajorStatus uint64 `protobuf:"varint,1,opt,name=major_status,json=majorStatus,proto3" json:"major_status,omitempty"` // Major status.
	SubStatus   uint64 `protobuf:"varint,2,opt,name=sub_status,json=subStatus,proto3" json:"sub_status,omitempty"`       // Sub status if needed (optional).
	Message     string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                             // Message with error details if needed (optional).
	StatusName  string `protobuf:"bytes,4,opt,name=status_name,json=statusName,proto3" json:"status_name,omitempty"`     // Major status name.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                     // Status description.
}

func (x *VMStatus) Reset() {
	*x = VMStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMStatus) ProtoMessage() {}

func (x *VMStatus) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMStatus.ProtoReflect.Descriptor instead.
func (*VMStatus) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{0}
}

func (x *VMStatus) GetMajorStatus() uint64 {
	if x != nil {
		return x.MajorStatus
	}
	return 0
}

func (x *VMStatus) GetSubStatus() uint64 {
	if x != nil {
		return x.SubStatus
	}
	return 0
}

func (x *VMStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VMStatus) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *VMStatus) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Describing VMType for events.
type VMType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag       VMTypeTag    `protobuf:"varint,1,opt,name=tag,proto3,enum=vm_grpc.VMTypeTag" json:"tag,omitempty"`      // Type.
	StructTag *VMStructTag `protobuf:"bytes,2,opt,name=struct_tag,json=structTag,proto3" json:"struct_tag,omitempty"` // If type is Struct put struct into variable, otherwise not, optional value.
}

func (x *VMType) Reset() {
	*x = VMType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMType) ProtoMessage() {}

func (x *VMType) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMType.ProtoReflect.Descriptor instead.
func (*VMType) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{1}
}

func (x *VMType) GetTag() VMTypeTag {
	if x != nil {
		return x.Tag
	}
	return VMTypeTag_Bool
}

func (x *VMType) GetStructTag() *VMStructTag {
	if x != nil {
		return x.StructTag
	}
	return nil
}

// Structure tag (for vm events contains structures).
type VMStructTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    []byte    `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`                         // address of module owner
	Module     string    `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`                           // module where event happens.
	Name       string    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                               // name of event (not sure yet, need to test).
	TypeParams []*VMType `protobuf:"bytes,4,rep,name=type_params,json=typeParams,proto3" json:"type_params,omitempty"` // event parameters (recursive).
}

func (x *VMStructTag) Reset() {
	*x = VMStructTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMStructTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMStructTag) ProtoMessage() {}

func (x *VMStructTag) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMStructTag.ProtoReflect.Descriptor instead.
func (*VMStructTag) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{2}
}

func (x *VMStructTag) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *VMStructTag) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *VMStructTag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VMStructTag) GetTypeParams() []*VMType {
	if x != nil {
		return x.TypeParams
	}
	return nil
}

// VM event returns after contract execution.
type VMEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key            []byte  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`                                              // key to store vm event.
	SequenceNumber uint64  `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"` // sequence number of event during execution.
	Type           *VMType `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                            // Type of value inside event.
	EventData      []byte  `protobuf:"bytes,4,opt,name=event_data,json=eventData,proto3" json:"event_data,omitempty"`                 // Event data in bytes to parse.
}

func (x *VMEvent) Reset() {
	*x = VMEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMEvent) ProtoMessage() {}

func (x *VMEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMEvent.ProtoReflect.Descriptor instead.
func (*VMEvent) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{3}
}

func (x *VMEvent) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *VMEvent) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *VMEvent) GetType() *VMType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *VMEvent) GetEventData() []byte {
	if x != nil {
		return x.EventData
	}
	return nil
}

// Storage path
type VMAccessPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // account address.
	Path    []byte `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`       // storage path.
}

func (x *VMAccessPath) Reset() {
	*x = VMAccessPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMAccessPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMAccessPath) ProtoMessage() {}

func (x *VMAccessPath) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMAccessPath.ProtoReflect.Descriptor instead.
func (*VMAccessPath) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{4}
}

func (x *VMAccessPath) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *VMAccessPath) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

// VM value should be passed before execution and return after execution (with opcodes), write_set in nutshell.
type VMValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  VmWriteOp     `protobuf:"varint,2,opt,name=type,proto3,enum=vm_grpc.VmWriteOp" json:"type,omitempty"` // Type of operation
	Value []byte        `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`                       // Value returns from vm.
	Path  *VMAccessPath `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`                         // Access path.
}

func (x *VMValue) Reset() {
	*x = VMValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMValue) ProtoMessage() {}

func (x *VMValue) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMValue.ProtoReflect.Descriptor instead.
func (*VMValue) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{5}
}

func (x *VMValue) GetType() VmWriteOp {
	if x != nil {
		return x.Type
	}
	return VmWriteOp_Value
}

func (x *VMValue) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *VMValue) GetPath() *VMAccessPath {
	if x != nil {
		return x.Path
	}
	return nil
}

// Contract arguments.
type VMArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  VMTypeTag `protobuf:"varint,1,opt,name=type,proto3,enum=vm_grpc.VMTypeTag" json:"type,omitempty"` // Argument type.
	Value string    `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`                       // Argument value.
}

func (x *VMArgs) Reset() {
	*x = VMArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMArgs) ProtoMessage() {}

func (x *VMArgs) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMArgs.ProtoReflect.Descriptor instead.
func (*VMArgs) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{6}
}

func (x *VMArgs) GetType() VMTypeTag {
	if x != nil {
		return x.Type
	}
	return VMTypeTag_Bool
}

func (x *VMArgs) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// VM contract object to process.
type VMContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address      string       `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`                                                          // owner of contract (module) or script executor, bech32 form.
	MaxGasAmount uint64       `protobuf:"varint,2,opt,name=max_gas_amount,json=maxGasAmount,proto3" json:"max_gas_amount,omitempty"`                         // maximal total gas specified by wallet to spend for this transaction.
	GasUnitPrice uint64       `protobuf:"varint,3,opt,name=gas_unit_price,json=gasUnitPrice,proto3" json:"gas_unit_price,omitempty"`                         // maximal price can be paid per gas.
	Code         []byte       `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`                                                                // compiled contract code.
	ContractType ContractType `protobuf:"varint,6,opt,name=contract_type,json=contractType,proto3,enum=vm_grpc.ContractType" json:"contract_type,omitempty"` // Type of contract
	Args         []*VMArgs    `protobuf:"bytes,7,rep,name=args,proto3" json:"args,omitempty"`                                                                // Contract arguments.
}

func (x *VMContract) Reset() {
	*x = VMContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMContract) ProtoMessage() {}

func (x *VMContract) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMContract.ProtoReflect.Descriptor instead.
func (*VMContract) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{7}
}

func (x *VMContract) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *VMContract) GetMaxGasAmount() uint64 {
	if x != nil {
		return x.MaxGasAmount
	}
	return 0
}

func (x *VMContract) GetGasUnitPrice() uint64 {
	if x != nil {
		return x.GasUnitPrice
	}
	return 0
}

func (x *VMContract) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *VMContract) GetContractType() ContractType {
	if x != nil {
		return x.ContractType
	}
	return ContractType_Module
}

func (x *VMContract) GetArgs() []*VMArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

// Response from VM contains write_set, events, gas used and status for specific contract.
type VMExecuteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WriteSet     []*VMValue     `protobuf:"bytes,1,rep,name=write_set,json=writeSet,proto3" json:"write_set,omitempty"`          // using string instead of bytes for now, as map support only ints and strings as keys
	Events       []*VMEvent     `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`                              // list of events executed during contract execution
	GasUsed      uint64         `protobuf:"varint,3,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`            // Gas used during execution.
	Status       ContractStatus `protobuf:"varint,4,opt,name=status,proto3,enum=vm_grpc.ContractStatus" json:"status,omitempty"` // Status of contract execution.
	StatusStruct *VMStatus      `protobuf:"bytes,5,opt,name=statusStruct,proto3" json:"statusStruct,omitempty"`                  // Main status of execution, might contain an error.
}

func (x *VMExecuteResponse) Reset() {
	*x = VMExecuteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMExecuteResponse) ProtoMessage() {}

func (x *VMExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMExecuteResponse.ProtoReflect.Descriptor instead.
func (*VMExecuteResponse) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{8}
}

func (x *VMExecuteResponse) GetWriteSet() []*VMValue {
	if x != nil {
		return x.WriteSet
	}
	return nil
}

func (x *VMExecuteResponse) GetEvents() []*VMEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *VMExecuteResponse) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *VMExecuteResponse) GetStatus() ContractStatus {
	if x != nil {
		return x.Status
	}
	return ContractStatus_Discard
}

func (x *VMExecuteResponse) GetStatusStruct() *VMStatus {
	if x != nil {
		return x.StatusStruct
	}
	return nil
}

// Compiler API
type SourceFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text    string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`       // utf8 encoded source code with libra/bech32 addresses
	Address []byte `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"` // address of the sender, in bech32 form
}

func (x *SourceFile) Reset() {
	*x = SourceFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceFile) ProtoMessage() {}

func (x *SourceFile) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceFile.ProtoReflect.Descriptor instead.
func (*SourceFile) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{9}
}

func (x *SourceFile) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SourceFile) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

// Compilation unit.
type CompilationUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"` // utf8 encoded source code with libra/bech32 addresses
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // name of the unit.
}

func (x *CompilationUnit) Reset() {
	*x = CompilationUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompilationUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompilationUnit) ProtoMessage() {}

func (x *CompilationUnit) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompilationUnit.ProtoReflect.Descriptor instead.
func (*CompilationUnit) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{10}
}

func (x *CompilationUnit) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CompilationUnit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Compiler API
type SourceFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units   []*CompilationUnit `protobuf:"bytes,1,rep,name=units,proto3" json:"units,omitempty"`     // Compilation units.
	Address []byte             `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"` // address of the sender, in bech32 form
}

func (x *SourceFiles) Reset() {
	*x = SourceFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceFiles) ProtoMessage() {}

func (x *SourceFiles) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceFiles.ProtoReflect.Descriptor instead.
func (*SourceFiles) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{11}
}

func (x *SourceFiles) GetUnits() []*CompilationUnit {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *SourceFiles) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

// Compiled source.
type CompiledUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`         // name of the module/script.
	Bytecode []byte `protobuf:"bytes,2,opt,name=bytecode,proto3" json:"bytecode,omitempty"` // bytecode of the compiled module/script
}

func (x *CompiledUnit) Reset() {
	*x = CompiledUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompiledUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompiledUnit) ProtoMessage() {}

func (x *CompiledUnit) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompiledUnit.ProtoReflect.Descriptor instead.
func (*CompiledUnit) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{12}
}

func (x *CompiledUnit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompiledUnit) GetBytecode() []byte {
	if x != nil {
		return x.Bytecode
	}
	return nil
}

type MultipleCompilationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units  []*CompiledUnit `protobuf:"bytes,1,rep,name=units,proto3" json:"units,omitempty"`
	Errors []string        `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"` // list of error messages, empty if successful
}

func (x *MultipleCompilationResult) Reset() {
	*x = MultipleCompilationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleCompilationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleCompilationResult) ProtoMessage() {}

func (x *MultipleCompilationResult) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleCompilationResult.ProtoReflect.Descriptor instead.
func (*MultipleCompilationResult) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{13}
}

func (x *MultipleCompilationResult) GetUnits() []*CompiledUnit {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *MultipleCompilationResult) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type CompilationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytecode []byte   `protobuf:"bytes,1,opt,name=bytecode,proto3" json:"bytecode,omitempty"` // bytecode of the compiled module/script
	Errors   []string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`     // list of error messages, empty if successful
}

func (x *CompilationResult) Reset() {
	*x = CompilationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompilationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompilationResult) ProtoMessage() {}

func (x *CompilationResult) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompilationResult.ProtoReflect.Descriptor instead.
func (*CompilationResult) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{14}
}

func (x *CompilationResult) GetBytecode() []byte {
	if x != nil {
		return x.Bytecode
	}
	return nil
}

func (x *CompilationResult) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Script Arguments API
type VMScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code []byte `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"` // bytecode of script
}

func (x *VMScript) Reset() {
	*x = VMScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMScript) ProtoMessage() {}

func (x *VMScript) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMScript.ProtoReflect.Descriptor instead.
func (*VMScript) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{15}
}

func (x *VMScript) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arguments []VMTypeTag `protobuf:"varint,1,rep,packed,name=arguments,proto3,enum=vm_grpc.VMTypeTag" json:"arguments,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{16}
}

func (x *Signature) GetArguments() []VMTypeTag {
	if x != nil {
		return x.Arguments
	}
	return nil
}

var File_vm_proto protoreflect.FileDescriptor

var file_vm_proto_rawDesc = []byte{
	0x0a, 0x08, 0x76, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x76, 0x6d, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x22, 0xa9, 0x01, 0x0a, 0x08, 0x56, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x63, 0x0a, 0x06, 0x56, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x76, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x56, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12,
	0x33, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x4d,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x61, 0x67, 0x52, 0x09, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x54, 0x61, 0x67, 0x22, 0x85, 0x01, 0x0a, 0x0b, 0x56, 0x4d, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x54, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x76, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x4d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x88, 0x01, 0x0a,
	0x07, 0x56, 0x4d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x4d, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3c, 0x0a, 0x0c, 0x56, 0x4d, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x72, 0x0a, 0x07, 0x56, 0x4d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x76, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x4f, 0x70, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76,
	0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x4d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x46, 0x0a, 0x06, 0x56, 0x4d, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x76, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x4d, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xe7, 0x01, 0x0a, 0x0a, 0x56, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61,
	0x78, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x47, 0x61, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x67, 0x61, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x76, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56,
	0x4d, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x11,
	0x56, 0x4d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56,
	0x4d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x74,
	0x12, 0x28, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x76, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x4d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76,
	0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x3a, 0x0a,
	0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x39, 0x0a, 0x0f, 0x43, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x0b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3e, 0x0a,
	0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a,
	0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x6d, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22,
	0x47, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x1e, 0x0a, 0x08, 0x56, 0x4d, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3d, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x76, 0x6d, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x56, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67, 0x52, 0x09, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2a, 0x26, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x10, 0x01, 0x2a,
	0x27, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x4b, 0x65, 0x65, 0x70, 0x10, 0x01, 0x2a, 0x58, 0x0a, 0x09, 0x56, 0x4d, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x61, 0x67, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x55, 0x36, 0x34, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x79, 0x74, 0x65,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x10, 0x04,
	0x12, 0x06, 0x0a, 0x02, 0x55, 0x38, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x31, 0x32, 0x38,
	0x10, 0x06, 0x2a, 0x24, 0x0a, 0x09, 0x56, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x12,
	0x09, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x32, 0x51, 0x0a, 0x09, 0x56, 0x4d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x13, 0x2e, 0x76, 0x6d, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x56, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1a, 0x2e,
	0x76, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x4d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x4a, 0x0a, 0x0a, 0x56,
	0x4d, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x12, 0x13, 0x2e, 0x76, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x1a, 0x2e, 0x76, 0x6d, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x32, 0x62, 0x0a, 0x19, 0x56, 0x4d, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x12,
	0x14, 0x2e, 0x76, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x22, 0x2e, 0x76, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x32, 0x4b, 0x0a, 0x10, 0x56,
	0x4d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x37, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x11, 0x2e, 0x76, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x4d, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x1a, 0x12, 0x2e, 0x76, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vm_proto_rawDescOnce sync.Once
	file_vm_proto_rawDescData = file_vm_proto_rawDesc
)

func file_vm_proto_rawDescGZIP() []byte {
	file_vm_proto_rawDescOnce.Do(func() {
		file_vm_proto_rawDescData = protoimpl.X.CompressGZIP(file_vm_proto_rawDescData)
	})
	return file_vm_proto_rawDescData
}

var file_vm_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_vm_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_vm_proto_goTypes = []interface{}{
	(ContractType)(0),                 // 0: vm_grpc.ContractType
	(ContractStatus)(0),               // 1: vm_grpc.ContractStatus
	(VMTypeTag)(0),                    // 2: vm_grpc.VMTypeTag
	(VmWriteOp)(0),                    // 3: vm_grpc.VmWriteOp
	(*VMStatus)(nil),                  // 4: vm_grpc.VMStatus
	(*VMType)(nil),                    // 5: vm_grpc.VMType
	(*VMStructTag)(nil),               // 6: vm_grpc.VMStructTag
	(*VMEvent)(nil),                   // 7: vm_grpc.VMEvent
	(*VMAccessPath)(nil),              // 8: vm_grpc.VMAccessPath
	(*VMValue)(nil),                   // 9: vm_grpc.VMValue
	(*VMArgs)(nil),                    // 10: vm_grpc.VMArgs
	(*VMContract)(nil),                // 11: vm_grpc.VMContract
	(*VMExecuteResponse)(nil),         // 12: vm_grpc.VMExecuteResponse
	(*SourceFile)(nil),                // 13: vm_grpc.SourceFile
	(*CompilationUnit)(nil),           // 14: vm_grpc.CompilationUnit
	(*SourceFiles)(nil),               // 15: vm_grpc.SourceFiles
	(*CompiledUnit)(nil),              // 16: vm_grpc.CompiledUnit
	(*MultipleCompilationResult)(nil), // 17: vm_grpc.MultipleCompilationResult
	(*CompilationResult)(nil),         // 18: vm_grpc.CompilationResult
	(*VMScript)(nil),                  // 19: vm_grpc.VMScript
	(*Signature)(nil),                 // 20: vm_grpc.Signature
}
var file_vm_proto_depIdxs = []int32{
	2,  // 0: vm_grpc.VMType.tag:type_name -> vm_grpc.VMTypeTag
	6,  // 1: vm_grpc.VMType.struct_tag:type_name -> vm_grpc.VMStructTag
	5,  // 2: vm_grpc.VMStructTag.type_params:type_name -> vm_grpc.VMType
	5,  // 3: vm_grpc.VMEvent.type:type_name -> vm_grpc.VMType
	3,  // 4: vm_grpc.VMValue.type:type_name -> vm_grpc.VmWriteOp
	8,  // 5: vm_grpc.VMValue.path:type_name -> vm_grpc.VMAccessPath
	2,  // 6: vm_grpc.VMArgs.type:type_name -> vm_grpc.VMTypeTag
	0,  // 7: vm_grpc.VMContract.contract_type:type_name -> vm_grpc.ContractType
	10, // 8: vm_grpc.VMContract.args:type_name -> vm_grpc.VMArgs
	9,  // 9: vm_grpc.VMExecuteResponse.write_set:type_name -> vm_grpc.VMValue
	7,  // 10: vm_grpc.VMExecuteResponse.events:type_name -> vm_grpc.VMEvent
	1,  // 11: vm_grpc.VMExecuteResponse.status:type_name -> vm_grpc.ContractStatus
	4,  // 12: vm_grpc.VMExecuteResponse.statusStruct:type_name -> vm_grpc.VMStatus
	14, // 13: vm_grpc.SourceFiles.units:type_name -> vm_grpc.CompilationUnit
	16, // 14: vm_grpc.MultipleCompilationResult.units:type_name -> vm_grpc.CompiledUnit
	2,  // 15: vm_grpc.Signature.arguments:type_name -> vm_grpc.VMTypeTag
	11, // 16: vm_grpc.VMService.ExecuteContract:input_type -> vm_grpc.VMContract
	13, // 17: vm_grpc.VMCompiler.Compile:input_type -> vm_grpc.SourceFile
	15, // 18: vm_grpc.VMMultipleSourcesCompiler.Compile:input_type -> vm_grpc.SourceFiles
	19, // 19: vm_grpc.VMScriptMetadata.GetSignature:input_type -> vm_grpc.VMScript
	12, // 20: vm_grpc.VMService.ExecuteContract:output_type -> vm_grpc.VMExecuteResponse
	18, // 21: vm_grpc.VMCompiler.Compile:output_type -> vm_grpc.CompilationResult
	17, // 22: vm_grpc.VMMultipleSourcesCompiler.Compile:output_type -> vm_grpc.MultipleCompilationResult
	20, // 23: vm_grpc.VMScriptMetadata.GetSignature:output_type -> vm_grpc.Signature
	20, // [20:24] is the sub-list for method output_type
	16, // [16:20] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_vm_proto_init() }
func file_vm_proto_init() {
	if File_vm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMStructTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMAccessPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMExecuteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompilationUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompiledUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipleCompilationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompilationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vm_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_vm_proto_goTypes,
		DependencyIndexes: file_vm_proto_depIdxs,
		EnumInfos:         file_vm_proto_enumTypes,
		MessageInfos:      file_vm_proto_msgTypes,
	}.Build()
	File_vm_proto = out.File
	file_vm_proto_rawDesc = nil
	file_vm_proto_goTypes = nil
	file_vm_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VMServiceClient is the client API for VMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VMServiceClient interface {
	ExecuteContract(ctx context.Context, in *VMContract, opts ...grpc.CallOption) (*VMExecuteResponse, error)
}

type vMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVMServiceClient(cc grpc.ClientConnInterface) VMServiceClient {
	return &vMServiceClient{cc}
}

func (c *vMServiceClient) ExecuteContract(ctx context.Context, in *VMContract, opts ...grpc.CallOption) (*VMExecuteResponse, error) {
	out := new(VMExecuteResponse)
	err := c.cc.Invoke(ctx, "/vm_grpc.VMService/ExecuteContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMServiceServer is the server API for VMService service.
type VMServiceServer interface {
	ExecuteContract(context.Context, *VMContract) (*VMExecuteResponse, error)
}

// UnimplementedVMServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVMServiceServer struct {
}

func (*UnimplementedVMServiceServer) ExecuteContract(context.Context, *VMContract) (*VMExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteContract not implemented")
}

func RegisterVMServiceServer(s *grpc.Server, srv VMServiceServer) {
	s.RegisterService(&_VMService_serviceDesc, srv)
}

func _VMService_ExecuteContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ExecuteContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm_grpc.VMService/ExecuteContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ExecuteContract(ctx, req.(*VMContract))
	}
	return interceptor(ctx, in, info, handler)
}

var _VMService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vm_grpc.VMService",
	HandlerType: (*VMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteContract",
			Handler:    _VMService_ExecuteContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vm.proto",
}

// VMCompilerClient is the client API for VMCompiler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VMCompilerClient interface {
	Compile(ctx context.Context, in *SourceFile, opts ...grpc.CallOption) (*CompilationResult, error)
}

type vMCompilerClient struct {
	cc grpc.ClientConnInterface
}

func NewVMCompilerClient(cc grpc.ClientConnInterface) VMCompilerClient {
	return &vMCompilerClient{cc}
}

func (c *vMCompilerClient) Compile(ctx context.Context, in *SourceFile, opts ...grpc.CallOption) (*CompilationResult, error) {
	out := new(CompilationResult)
	err := c.cc.Invoke(ctx, "/vm_grpc.VMCompiler/Compile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMCompilerServer is the server API for VMCompiler service.
type VMCompilerServer interface {
	Compile(context.Context, *SourceFile) (*CompilationResult, error)
}

// UnimplementedVMCompilerServer can be embedded to have forward compatible implementations.
type UnimplementedVMCompilerServer struct {
}

func (*UnimplementedVMCompilerServer) Compile(context.Context, *SourceFile) (*CompilationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compile not implemented")
}

func RegisterVMCompilerServer(s *grpc.Server, srv VMCompilerServer) {
	s.RegisterService(&_VMCompiler_serviceDesc, srv)
}

func _VMCompiler_Compile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMCompilerServer).Compile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm_grpc.VMCompiler/Compile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMCompilerServer).Compile(ctx, req.(*SourceFile))
	}
	return interceptor(ctx, in, info, handler)
}

var _VMCompiler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vm_grpc.VMCompiler",
	HandlerType: (*VMCompilerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compile",
			Handler:    _VMCompiler_Compile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vm.proto",
}

// VMMultipleSourcesCompilerClient is the client API for VMMultipleSourcesCompiler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VMMultipleSourcesCompilerClient interface {
	Compile(ctx context.Context, in *SourceFiles, opts ...grpc.CallOption) (*MultipleCompilationResult, error)
}

type vMMultipleSourcesCompilerClient struct {
	cc grpc.ClientConnInterface
}

func NewVMMultipleSourcesCompilerClient(cc grpc.ClientConnInterface) VMMultipleSourcesCompilerClient {
	return &vMMultipleSourcesCompilerClient{cc}
}

func (c *vMMultipleSourcesCompilerClient) Compile(ctx context.Context, in *SourceFiles, opts ...grpc.CallOption) (*MultipleCompilationResult, error) {
	out := new(MultipleCompilationResult)
	err := c.cc.Invoke(ctx, "/vm_grpc.VMMultipleSourcesCompiler/Compile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMMultipleSourcesCompilerServer is the server API for VMMultipleSourcesCompiler service.
type VMMultipleSourcesCompilerServer interface {
	Compile(context.Context, *SourceFiles) (*MultipleCompilationResult, error)
}

// UnimplementedVMMultipleSourcesCompilerServer can be embedded to have forward compatible implementations.
type UnimplementedVMMultipleSourcesCompilerServer struct {
}

func (*UnimplementedVMMultipleSourcesCompilerServer) Compile(context.Context, *SourceFiles) (*MultipleCompilationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compile not implemented")
}

func RegisterVMMultipleSourcesCompilerServer(s *grpc.Server, srv VMMultipleSourcesCompilerServer) {
	s.RegisterService(&_VMMultipleSourcesCompiler_serviceDesc, srv)
}

func _VMMultipleSourcesCompiler_Compile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceFiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMMultipleSourcesCompilerServer).Compile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm_grpc.VMMultipleSourcesCompiler/Compile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMMultipleSourcesCompilerServer).Compile(ctx, req.(*SourceFiles))
	}
	return interceptor(ctx, in, info, handler)
}

var _VMMultipleSourcesCompiler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vm_grpc.VMMultipleSourcesCompiler",
	HandlerType: (*VMMultipleSourcesCompilerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compile",
			Handler:    _VMMultipleSourcesCompiler_Compile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vm.proto",
}

// VMScriptMetadataClient is the client API for VMScriptMetadata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VMScriptMetadataClient interface {
	GetSignature(ctx context.Context, in *VMScript, opts ...grpc.CallOption) (*Signature, error)
}

type vMScriptMetadataClient struct {
	cc grpc.ClientConnInterface
}

func NewVMScriptMetadataClient(cc grpc.ClientConnInterface) VMScriptMetadataClient {
	return &vMScriptMetadataClient{cc}
}

func (c *vMScriptMetadataClient) GetSignature(ctx context.Context, in *VMScript, opts ...grpc.CallOption) (*Signature, error) {
	out := new(Signature)
	err := c.cc.Invoke(ctx, "/vm_grpc.VMScriptMetadata/GetSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMScriptMetadataServer is the server API for VMScriptMetadata service.
type VMScriptMetadataServer interface {
	GetSignature(context.Context, *VMScript) (*Signature, error)
}

// UnimplementedVMScriptMetadataServer can be embedded to have forward compatible implementations.
type UnimplementedVMScriptMetadataServer struct {
}

func (*UnimplementedVMScriptMetadataServer) GetSignature(context.Context, *VMScript) (*Signature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignature not implemented")
}

func RegisterVMScriptMetadataServer(s *grpc.Server, srv VMScriptMetadataServer) {
	s.RegisterService(&_VMScriptMetadata_serviceDesc, srv)
}

func _VMScriptMetadata_GetSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMScript)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMScriptMetadataServer).GetSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm_grpc.VMScriptMetadata/GetSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMScriptMetadataServer).GetSignature(ctx, req.(*VMScript))
	}
	return interceptor(ctx, in, info, handler)
}

var _VMScriptMetadata_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vm_grpc.VMScriptMetadata",
	HandlerType: (*VMScriptMetadataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSignature",
			Handler:    _VMScriptMetadata_GetSignature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vm.proto",
}
