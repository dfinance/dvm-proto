// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vm.proto

package vm_grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Type of contract (module or script).
type ContractType int32

const (
	ContractType_Module ContractType = 0
	ContractType_Script ContractType = 1
)

var ContractType_name = map[int32]string{
	0: "Module",
	1: "Script",
}

var ContractType_value = map[string]int32{
	"Module": 0,
	"Script": 1,
}

func (x ContractType) String() string {
	return proto.EnumName(ContractType_name, int32(x))
}

func (ContractType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cab246c8c7c5372d, []int{0}
}

// Status of contract execution.
type ContractStatus int32

const (
	ContractStatus_Discard ContractStatus = 0
	ContractStatus_Keep    ContractStatus = 1
)

var ContractStatus_name = map[int32]string{
	0: "Discard",
	1: "Keep",
}

var ContractStatus_value = map[string]int32{
	"Discard": 0,
	"Keep":    1,
}

func (x ContractStatus) String() string {
	return proto.EnumName(ContractStatus_name, int32(x))
}

func (ContractStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cab246c8c7c5372d, []int{1}
}

// Type of value returned by event during contract execution.
type VMTypeTag int32

const (
	VMTypeTag_Bool      VMTypeTag = 0
	VMTypeTag_U64       VMTypeTag = 1
	VMTypeTag_ByteArray VMTypeTag = 2
	VMTypeTag_Address   VMTypeTag = 3
	VMTypeTag_Struct    VMTypeTag = 4
	VMTypeTag_U8        VMTypeTag = 5
	VMTypeTag_U128      VMTypeTag = 6
)

var VMTypeTag_name = map[int32]string{
	0: "Bool",
	1: "U64",
	2: "ByteArray",
	3: "Address",
	4: "Struct",
	5: "U8",
	6: "U128",
}

var VMTypeTag_value = map[string]int32{
	"Bool":      0,
	"U64":       1,
	"ByteArray": 2,
	"Address":   3,
	"Struct":    4,
	"U8":        5,
	"U128":      6,
}

func (x VMTypeTag) String() string {
	return proto.EnumName(VMTypeTag_name, int32(x))
}

func (VMTypeTag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cab246c8c7c5372d, []int{2}
}

// Write set operation type.
type VmWriteOp int32

const (
	VmWriteOp_Value    VmWriteOp = 0
	VmWriteOp_Deletion VmWriteOp = 1
)

var VmWriteOp_name = map[int32]string{
	0: "Value",
	1: "Deletion",
}

var VmWriteOp_value = map[string]int32{
	"Value":    0,
	"Deletion": 1,
}

func (x VmWriteOp) String() string {
	return proto.EnumName(VmWriteOp_name, int32(x))
}

func (VmWriteOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cab246c8c7c5372d, []int{3}
}

// Status of code contract execution.
type VMErrorStatus struct {
	MajorStatus          uint64   `protobuf:"varint,1,opt,name=major_status,json=majorStatus,proto3" json:"major_status,omitempty"`
	SubStatus            uint64   `protobuf:"varint,2,opt,name=sub_status,json=subStatus,proto3" json:"sub_status,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMErrorStatus) Reset()         { *m = VMErrorStatus{} }
func (m *VMErrorStatus) String() string { return proto.CompactTextString(m) }
func (*VMErrorStatus) ProtoMessage()    {}
func (*VMErrorStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab246c8c7c5372d, []int{0}
}

func (m *VMErrorStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMErrorStatus.Unmarshal(m, b)
}
func (m *VMErrorStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMErrorStatus.Marshal(b, m, deterministic)
}
func (m *VMErrorStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMErrorStatus.Merge(m, src)
}
func (m *VMErrorStatus) XXX_Size() int {
	return xxx_messageInfo_VMErrorStatus.Size(m)
}
func (m *VMErrorStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VMErrorStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VMErrorStatus proto.InternalMessageInfo

func (m *VMErrorStatus) GetMajorStatus() uint64 {
	if m != nil {
		return m.MajorStatus
	}
	return 0
}

func (m *VMErrorStatus) GetSubStatus() uint64 {
	if m != nil {
		return m.SubStatus
	}
	return 0
}

func (m *VMErrorStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Describing VMType for events.
type VMType struct {
	Tag                  VMTypeTag    `protobuf:"varint,1,opt,name=tag,proto3,enum=vm_grpc.VMTypeTag" json:"tag,omitempty"`
	StructTag            *VMStructTag `protobuf:"bytes,2,opt,name=struct_tag,json=structTag,proto3" json:"struct_tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *VMType) Reset()         { *m = VMType{} }
func (m *VMType) String() string { return proto.CompactTextString(m) }
func (*VMType) ProtoMessage()    {}
func (*VMType) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab246c8c7c5372d, []int{1}
}

func (m *VMType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMType.Unmarshal(m, b)
}
func (m *VMType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMType.Marshal(b, m, deterministic)
}
func (m *VMType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMType.Merge(m, src)
}
func (m *VMType) XXX_Size() int {
	return xxx_messageInfo_VMType.Size(m)
}
func (m *VMType) XXX_DiscardUnknown() {
	xxx_messageInfo_VMType.DiscardUnknown(m)
}

var xxx_messageInfo_VMType proto.InternalMessageInfo

func (m *VMType) GetTag() VMTypeTag {
	if m != nil {
		return m.Tag
	}
	return VMTypeTag_Bool
}

func (m *VMType) GetStructTag() *VMStructTag {
	if m != nil {
		return m.StructTag
	}
	return nil
}

// Structure tag (for vm events contains structures).
type VMStructTag struct {
	Address              []byte    `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Module               string    `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	Name                 string    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	TypeParams           []*VMType `protobuf:"bytes,4,rep,name=type_params,json=typeParams,proto3" json:"type_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *VMStructTag) Reset()         { *m = VMStructTag{} }
func (m *VMStructTag) String() string { return proto.CompactTextString(m) }
func (*VMStructTag) ProtoMessage()    {}
func (*VMStructTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab246c8c7c5372d, []int{2}
}

func (m *VMStructTag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMStructTag.Unmarshal(m, b)
}
func (m *VMStructTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMStructTag.Marshal(b, m, deterministic)
}
func (m *VMStructTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMStructTag.Merge(m, src)
}
func (m *VMStructTag) XXX_Size() int {
	return xxx_messageInfo_VMStructTag.Size(m)
}
func (m *VMStructTag) XXX_DiscardUnknown() {
	xxx_messageInfo_VMStructTag.DiscardUnknown(m)
}

var xxx_messageInfo_VMStructTag proto.InternalMessageInfo

func (m *VMStructTag) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *VMStructTag) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *VMStructTag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VMStructTag) GetTypeParams() []*VMType {
	if m != nil {
		return m.TypeParams
	}
	return nil
}

// VM event returns after contract execution.
type VMEvent struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	SequenceNumber       uint64   `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Type                 *VMType  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	EventData            []byte   `protobuf:"bytes,4,opt,name=event_data,json=eventData,proto3" json:"event_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMEvent) Reset()         { *m = VMEvent{} }
func (m *VMEvent) String() string { return proto.CompactTextString(m) }
func (*VMEvent) ProtoMessage()    {}
func (*VMEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab246c8c7c5372d, []int{3}
}

func (m *VMEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMEvent.Unmarshal(m, b)
}
func (m *VMEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMEvent.Marshal(b, m, deterministic)
}
func (m *VMEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMEvent.Merge(m, src)
}
func (m *VMEvent) XXX_Size() int {
	return xxx_messageInfo_VMEvent.Size(m)
}
func (m *VMEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_VMEvent.DiscardUnknown(m)
}

var xxx_messageInfo_VMEvent proto.InternalMessageInfo

func (m *VMEvent) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *VMEvent) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *VMEvent) GetType() *VMType {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *VMEvent) GetEventData() []byte {
	if m != nil {
		return m.EventData
	}
	return nil
}

// Storage path
type VMAccessPath struct {
	Address              []byte   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Path                 []byte   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMAccessPath) Reset()         { *m = VMAccessPath{} }
func (m *VMAccessPath) String() string { return proto.CompactTextString(m) }
func (*VMAccessPath) ProtoMessage()    {}
func (*VMAccessPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab246c8c7c5372d, []int{4}
}

func (m *VMAccessPath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMAccessPath.Unmarshal(m, b)
}
func (m *VMAccessPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMAccessPath.Marshal(b, m, deterministic)
}
func (m *VMAccessPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMAccessPath.Merge(m, src)
}
func (m *VMAccessPath) XXX_Size() int {
	return xxx_messageInfo_VMAccessPath.Size(m)
}
func (m *VMAccessPath) XXX_DiscardUnknown() {
	xxx_messageInfo_VMAccessPath.DiscardUnknown(m)
}

var xxx_messageInfo_VMAccessPath proto.InternalMessageInfo

func (m *VMAccessPath) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *VMAccessPath) GetPath() []byte {
	if m != nil {
		return m.Path
	}
	return nil
}

// VM value should be passed before execution and return after execution (with opcodes), write_set in nutshell.
type VMValue struct {
	Type                 VmWriteOp     `protobuf:"varint,2,opt,name=type,proto3,enum=vm_grpc.VmWriteOp" json:"type,omitempty"`
	Value                []byte        `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Path                 *VMAccessPath `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *VMValue) Reset()         { *m = VMValue{} }
func (m *VMValue) String() string { return proto.CompactTextString(m) }
func (*VMValue) ProtoMessage()    {}
func (*VMValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab246c8c7c5372d, []int{5}
}

func (m *VMValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMValue.Unmarshal(m, b)
}
func (m *VMValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMValue.Marshal(b, m, deterministic)
}
func (m *VMValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMValue.Merge(m, src)
}
func (m *VMValue) XXX_Size() int {
	return xxx_messageInfo_VMValue.Size(m)
}
func (m *VMValue) XXX_DiscardUnknown() {
	xxx_messageInfo_VMValue.DiscardUnknown(m)
}

var xxx_messageInfo_VMValue proto.InternalMessageInfo

func (m *VMValue) GetType() VmWriteOp {
	if m != nil {
		return m.Type
	}
	return VmWriteOp_Value
}

func (m *VMValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *VMValue) GetPath() *VMAccessPath {
	if m != nil {
		return m.Path
	}
	return nil
}

// Contract arguments.
type VMArgs struct {
	Type                 VMTypeTag `protobuf:"varint,1,opt,name=type,proto3,enum=vm_grpc.VMTypeTag" json:"type,omitempty"`
	Value                string    `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *VMArgs) Reset()         { *m = VMArgs{} }
func (m *VMArgs) String() string { return proto.CompactTextString(m) }
func (*VMArgs) ProtoMessage()    {}
func (*VMArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab246c8c7c5372d, []int{6}
}

func (m *VMArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMArgs.Unmarshal(m, b)
}
func (m *VMArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMArgs.Marshal(b, m, deterministic)
}
func (m *VMArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMArgs.Merge(m, src)
}
func (m *VMArgs) XXX_Size() int {
	return xxx_messageInfo_VMArgs.Size(m)
}
func (m *VMArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_VMArgs.DiscardUnknown(m)
}

var xxx_messageInfo_VMArgs proto.InternalMessageInfo

func (m *VMArgs) GetType() VMTypeTag {
	if m != nil {
		return m.Type
	}
	return VMTypeTag_Bool
}

func (m *VMArgs) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// VM contract object to process.
type VMContract struct {
	Address              string       `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	MaxGasAmount         uint64       `protobuf:"varint,2,opt,name=max_gas_amount,json=maxGasAmount,proto3" json:"max_gas_amount,omitempty"`
	GasUnitPrice         uint64       `protobuf:"varint,3,opt,name=gas_unit_price,json=gasUnitPrice,proto3" json:"gas_unit_price,omitempty"`
	Code                 []byte       `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	ContractType         ContractType `protobuf:"varint,6,opt,name=contract_type,json=contractType,proto3,enum=vm_grpc.ContractType" json:"contract_type,omitempty"`
	Args                 []*VMArgs    `protobuf:"bytes,7,rep,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *VMContract) Reset()         { *m = VMContract{} }
func (m *VMContract) String() string { return proto.CompactTextString(m) }
func (*VMContract) ProtoMessage()    {}
func (*VMContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab246c8c7c5372d, []int{7}
}

func (m *VMContract) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMContract.Unmarshal(m, b)
}
func (m *VMContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMContract.Marshal(b, m, deterministic)
}
func (m *VMContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMContract.Merge(m, src)
}
func (m *VMContract) XXX_Size() int {
	return xxx_messageInfo_VMContract.Size(m)
}
func (m *VMContract) XXX_DiscardUnknown() {
	xxx_messageInfo_VMContract.DiscardUnknown(m)
}

var xxx_messageInfo_VMContract proto.InternalMessageInfo

func (m *VMContract) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *VMContract) GetMaxGasAmount() uint64 {
	if m != nil {
		return m.MaxGasAmount
	}
	return 0
}

func (m *VMContract) GetGasUnitPrice() uint64 {
	if m != nil {
		return m.GasUnitPrice
	}
	return 0
}

func (m *VMContract) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *VMContract) GetContractType() ContractType {
	if m != nil {
		return m.ContractType
	}
	return ContractType_Module
}

func (m *VMContract) GetArgs() []*VMArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

// Response from VM contains write_set, events, gas used and status for specific contract.
type VMExecuteResponse struct {
	WriteSet             []*VMValue     `protobuf:"bytes,1,rep,name=write_set,json=writeSet,proto3" json:"write_set,omitempty"`
	Events               []*VMEvent     `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	GasUsed              uint64         `protobuf:"varint,3,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Status               ContractStatus `protobuf:"varint,4,opt,name=status,proto3,enum=vm_grpc.ContractStatus" json:"status,omitempty"`
	StatusStruct         *VMErrorStatus `protobuf:"bytes,5,opt,name=statusStruct,proto3" json:"statusStruct,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VMExecuteResponse) Reset()         { *m = VMExecuteResponse{} }
func (m *VMExecuteResponse) String() string { return proto.CompactTextString(m) }
func (*VMExecuteResponse) ProtoMessage()    {}
func (*VMExecuteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab246c8c7c5372d, []int{8}
}

func (m *VMExecuteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMExecuteResponse.Unmarshal(m, b)
}
func (m *VMExecuteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMExecuteResponse.Marshal(b, m, deterministic)
}
func (m *VMExecuteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMExecuteResponse.Merge(m, src)
}
func (m *VMExecuteResponse) XXX_Size() int {
	return xxx_messageInfo_VMExecuteResponse.Size(m)
}
func (m *VMExecuteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VMExecuteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VMExecuteResponse proto.InternalMessageInfo

func (m *VMExecuteResponse) GetWriteSet() []*VMValue {
	if m != nil {
		return m.WriteSet
	}
	return nil
}

func (m *VMExecuteResponse) GetEvents() []*VMEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *VMExecuteResponse) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *VMExecuteResponse) GetStatus() ContractStatus {
	if m != nil {
		return m.Status
	}
	return ContractStatus_Discard
}

func (m *VMExecuteResponse) GetStatusStruct() *VMErrorStatus {
	if m != nil {
		return m.StatusStruct
	}
	return nil
}

// Response from VM in case of execution multiplay contracts.
type VMExecuteResponses struct {
	Executions           []*VMExecuteResponse `protobuf:"bytes,1,rep,name=executions,proto3" json:"executions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *VMExecuteResponses) Reset()         { *m = VMExecuteResponses{} }
func (m *VMExecuteResponses) String() string { return proto.CompactTextString(m) }
func (*VMExecuteResponses) ProtoMessage()    {}
func (*VMExecuteResponses) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab246c8c7c5372d, []int{9}
}

func (m *VMExecuteResponses) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMExecuteResponses.Unmarshal(m, b)
}
func (m *VMExecuteResponses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMExecuteResponses.Marshal(b, m, deterministic)
}
func (m *VMExecuteResponses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMExecuteResponses.Merge(m, src)
}
func (m *VMExecuteResponses) XXX_Size() int {
	return xxx_messageInfo_VMExecuteResponses.Size(m)
}
func (m *VMExecuteResponses) XXX_DiscardUnknown() {
	xxx_messageInfo_VMExecuteResponses.DiscardUnknown(m)
}

var xxx_messageInfo_VMExecuteResponses proto.InternalMessageInfo

func (m *VMExecuteResponses) GetExecutions() []*VMExecuteResponse {
	if m != nil {
		return m.Executions
	}
	return nil
}

// Execute request for VM
type VMExecuteRequest struct {
	Contracts            []*VMContract `protobuf:"bytes,1,rep,name=contracts,proto3" json:"contracts,omitempty"`
	Options              uint64        `protobuf:"varint,4,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *VMExecuteRequest) Reset()         { *m = VMExecuteRequest{} }
func (m *VMExecuteRequest) String() string { return proto.CompactTextString(m) }
func (*VMExecuteRequest) ProtoMessage()    {}
func (*VMExecuteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab246c8c7c5372d, []int{10}
}

func (m *VMExecuteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMExecuteRequest.Unmarshal(m, b)
}
func (m *VMExecuteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMExecuteRequest.Marshal(b, m, deterministic)
}
func (m *VMExecuteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMExecuteRequest.Merge(m, src)
}
func (m *VMExecuteRequest) XXX_Size() int {
	return xxx_messageInfo_VMExecuteRequest.Size(m)
}
func (m *VMExecuteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VMExecuteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VMExecuteRequest proto.InternalMessageInfo

func (m *VMExecuteRequest) GetContracts() []*VMContract {
	if m != nil {
		return m.Contracts
	}
	return nil
}

func (m *VMExecuteRequest) GetOptions() uint64 {
	if m != nil {
		return m.Options
	}
	return 0
}

type MvIrSourceFile struct {
	Text                 string       `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Address              []byte       `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Type                 ContractType `protobuf:"varint,3,opt,name=type,proto3,enum=vm_grpc.ContractType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MvIrSourceFile) Reset()         { *m = MvIrSourceFile{} }
func (m *MvIrSourceFile) String() string { return proto.CompactTextString(m) }
func (*MvIrSourceFile) ProtoMessage()    {}
func (*MvIrSourceFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab246c8c7c5372d, []int{11}
}

func (m *MvIrSourceFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MvIrSourceFile.Unmarshal(m, b)
}
func (m *MvIrSourceFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MvIrSourceFile.Marshal(b, m, deterministic)
}
func (m *MvIrSourceFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MvIrSourceFile.Merge(m, src)
}
func (m *MvIrSourceFile) XXX_Size() int {
	return xxx_messageInfo_MvIrSourceFile.Size(m)
}
func (m *MvIrSourceFile) XXX_DiscardUnknown() {
	xxx_messageInfo_MvIrSourceFile.DiscardUnknown(m)
}

var xxx_messageInfo_MvIrSourceFile proto.InternalMessageInfo

func (m *MvIrSourceFile) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MvIrSourceFile) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *MvIrSourceFile) GetType() ContractType {
	if m != nil {
		return m.Type
	}
	return ContractType_Module
}

type CompilationResult struct {
	Bytecode             []byte   `protobuf:"bytes,1,opt,name=bytecode,proto3" json:"bytecode,omitempty"`
	Errors               []string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompilationResult) Reset()         { *m = CompilationResult{} }
func (m *CompilationResult) String() string { return proto.CompactTextString(m) }
func (*CompilationResult) ProtoMessage()    {}
func (*CompilationResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab246c8c7c5372d, []int{12}
}

func (m *CompilationResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompilationResult.Unmarshal(m, b)
}
func (m *CompilationResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompilationResult.Marshal(b, m, deterministic)
}
func (m *CompilationResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompilationResult.Merge(m, src)
}
func (m *CompilationResult) XXX_Size() int {
	return xxx_messageInfo_CompilationResult.Size(m)
}
func (m *CompilationResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CompilationResult.DiscardUnknown(m)
}

var xxx_messageInfo_CompilationResult proto.InternalMessageInfo

func (m *CompilationResult) GetBytecode() []byte {
	if m != nil {
		return m.Bytecode
	}
	return nil
}

func (m *CompilationResult) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

func init() {
	proto.RegisterEnum("vm_grpc.ContractType", ContractType_name, ContractType_value)
	proto.RegisterEnum("vm_grpc.ContractStatus", ContractStatus_name, ContractStatus_value)
	proto.RegisterEnum("vm_grpc.VMTypeTag", VMTypeTag_name, VMTypeTag_value)
	proto.RegisterEnum("vm_grpc.VmWriteOp", VmWriteOp_name, VmWriteOp_value)
	proto.RegisterType((*VMErrorStatus)(nil), "vm_grpc.VMErrorStatus")
	proto.RegisterType((*VMType)(nil), "vm_grpc.VMType")
	proto.RegisterType((*VMStructTag)(nil), "vm_grpc.VMStructTag")
	proto.RegisterType((*VMEvent)(nil), "vm_grpc.VMEvent")
	proto.RegisterType((*VMAccessPath)(nil), "vm_grpc.VMAccessPath")
	proto.RegisterType((*VMValue)(nil), "vm_grpc.VMValue")
	proto.RegisterType((*VMArgs)(nil), "vm_grpc.VMArgs")
	proto.RegisterType((*VMContract)(nil), "vm_grpc.VMContract")
	proto.RegisterType((*VMExecuteResponse)(nil), "vm_grpc.VMExecuteResponse")
	proto.RegisterType((*VMExecuteResponses)(nil), "vm_grpc.VMExecuteResponses")
	proto.RegisterType((*VMExecuteRequest)(nil), "vm_grpc.VMExecuteRequest")
	proto.RegisterType((*MvIrSourceFile)(nil), "vm_grpc.MvIrSourceFile")
	proto.RegisterType((*CompilationResult)(nil), "vm_grpc.CompilationResult")
}

func init() {
	proto.RegisterFile("vm.proto", fileDescriptor_cab246c8c7c5372d)
}

var fileDescriptor_cab246c8c7c5372d = []byte{
	// 946 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0xdb, 0x6e, 0xdb, 0x46,
	0x10, 0x15, 0x2d, 0x5a, 0x12, 0x47, 0xb4, 0xc3, 0x6c, 0xd3, 0x54, 0x71, 0x51, 0xc0, 0x65, 0x8d,
	0xc4, 0x31, 0x50, 0xb7, 0x51, 0x8a, 0x22, 0x08, 0xfa, 0x50, 0xc5, 0x76, 0x82, 0xa2, 0x55, 0x6a,
	0x50, 0xb1, 0xda, 0x3e, 0x11, 0x2b, 0x6a, 0xa0, 0xb0, 0x11, 0x2f, 0xd9, 0x5d, 0xaa, 0xd6, 0x07,
	0x14, 0xe8, 0x9f, 0xf6, 0x07, 0xfa, 0x01, 0xc5, 0x0e, 0x97, 0x12, 0x25, 0xc7, 0x79, 0x9b, 0xd9,
	0x3d, 0x9c, 0xdb, 0x39, 0x3b, 0x84, 0xce, 0x22, 0x39, 0xcd, 0x45, 0xa6, 0x32, 0xd6, 0x5e, 0x24,
	0xe1, 0x4c, 0xe4, 0x91, 0xff, 0x0e, 0xf6, 0xc6, 0xc3, 0x0b, 0x21, 0x32, 0x31, 0x52, 0x5c, 0x15,
	0x92, 0x7d, 0x09, 0x6e, 0xc2, 0xff, 0xcc, 0x44, 0x28, 0xc9, 0xef, 0x59, 0x87, 0xd6, 0xb1, 0x1d,
	0x74, 0xe9, 0xcc, 0x40, 0xbe, 0x00, 0x90, 0xc5, 0xa4, 0x02, 0xec, 0x10, 0xc0, 0x91, 0xc5, 0xc4,
	0x5c, 0xf7, 0xa0, 0x9d, 0xa0, 0x94, 0x7c, 0x86, 0xbd, 0xe6, 0xa1, 0x75, 0xec, 0x04, 0x95, 0xeb,
	0x47, 0xd0, 0x1a, 0x0f, 0xdf, 0x2c, 0x73, 0x64, 0x47, 0xd0, 0x54, 0x7c, 0x46, 0xc1, 0xf7, 0xfb,
	0xec, 0xd4, 0x54, 0x73, 0x5a, 0xde, 0xbe, 0xe1, 0xb3, 0x40, 0x5f, 0xb3, 0xa7, 0x00, 0x52, 0x89,
	0x22, 0x52, 0xa1, 0x06, 0xeb, 0x44, 0xdd, 0xfe, 0xbd, 0x1a, 0x78, 0x44, 0x97, 0x1a, 0xee, 0xc8,
	0xca, 0xf4, 0xff, 0xb6, 0xa0, 0x5b, 0xbb, 0xd2, 0xe5, 0xf0, 0xe9, 0x54, 0xa0, 0x2c, 0x7b, 0x71,
	0x83, 0xca, 0x65, 0xf7, 0xa1, 0x95, 0x64, 0xd3, 0x62, 0x8e, 0x14, 0xda, 0x09, 0x8c, 0xc7, 0x18,
	0xd8, 0x29, 0x4f, 0xaa, 0xea, 0xc9, 0x66, 0xdf, 0x42, 0x57, 0x2d, 0x73, 0x0c, 0x73, 0x2e, 0x78,
	0x22, 0x7b, 0xf6, 0x61, 0xf3, 0xb8, 0xdb, 0xbf, 0xb3, 0x55, 0x78, 0x00, 0x1a, 0x73, 0x49, 0x10,
	0xff, 0x1f, 0x0b, 0xda, 0xe3, 0xe1, 0xc5, 0x02, 0x53, 0xc5, 0x3c, 0x68, 0xbe, 0xc3, 0xa5, 0xc9,
	0xaf, 0x4d, 0xf6, 0x08, 0xee, 0x48, 0x7c, 0x5f, 0x60, 0x1a, 0x61, 0x98, 0x16, 0xc9, 0x04, 0x85,
	0x19, 0xe4, 0x7e, 0x75, 0xfc, 0x9a, 0x4e, 0xd9, 0x57, 0x60, 0xeb, 0xa0, 0x54, 0xcc, 0x07, 0x32,
	0xd2, 0xa5, 0x66, 0x04, 0x75, 0xa2, 0x70, 0xca, 0x15, 0xef, 0xd9, 0x94, 0xc6, 0xa1, 0x93, 0x73,
	0xae, 0xb8, 0xff, 0x03, 0xb8, 0xe3, 0xe1, 0x20, 0x8a, 0x50, 0xca, 0x4b, 0xae, 0xde, 0x7e, 0x64,
	0x24, 0x0c, 0xec, 0x9c, 0xab, 0xb7, 0x54, 0x8b, 0x1b, 0x90, 0xed, 0x0b, 0xdd, 0xc7, 0x98, 0xcf,
	0x0b, 0x64, 0x0f, 0x4d, 0x31, 0x3b, 0xdb, 0xbc, 0x25, 0xbf, 0x89, 0x58, 0xe1, 0xaf, 0xb9, 0xa9,
	0xe7, 0x1e, 0xec, 0x2e, 0xf4, 0x07, 0x26, 0x7c, 0xe9, 0xb0, 0xc7, 0x26, 0x78, 0xd9, 0xca, 0xa7,
	0xb5, 0x56, 0xd6, 0xb5, 0x99, 0x9c, 0x2f, 0xb5, 0x52, 0x06, 0x62, 0x26, 0x57, 0x29, 0x6f, 0x97,
	0xca, 0x56, 0xca, 0x92, 0xcb, 0xd2, 0xf1, 0xff, 0xb5, 0x00, 0xc6, 0xc3, 0xb3, 0x2c, 0x55, 0x82,
	0x47, 0x6a, 0xbb, 0x71, 0x67, 0xdd, 0xf8, 0x11, 0xec, 0x27, 0xfc, 0x3a, 0x9c, 0x71, 0x19, 0xf2,
	0x24, 0x2b, 0x52, 0x65, 0xe8, 0x70, 0x13, 0x7e, 0xfd, 0x8a, 0xcb, 0x01, 0x9d, 0x69, 0x94, 0x46,
	0x14, 0x69, 0xac, 0xc2, 0x5c, 0xc4, 0x51, 0x49, 0x8b, 0x1d, 0xb8, 0x33, 0x2e, 0xaf, 0xd2, 0x58,
	0x5d, 0xea, 0x33, 0x3d, 0xc4, 0x28, 0x9b, 0xa2, 0xe1, 0x81, 0x6c, 0xf6, 0x1c, 0xf6, 0x22, 0x53,
	0x45, 0x48, 0xfd, 0xb4, 0xa8, 0x9f, 0xf5, 0x10, 0xaa, 0x1a, 0x89, 0x55, 0x37, 0xaa, 0x79, 0x5a,
	0x02, 0x5c, 0xcc, 0x64, 0xaf, 0x7d, 0x43, 0x74, 0x7a, 0x42, 0x01, 0x5d, 0xfa, 0xff, 0x59, 0x70,
	0x77, 0x3c, 0xbc, 0xb8, 0xc6, 0xa8, 0x50, 0x18, 0xa0, 0xcc, 0xb3, 0x54, 0x22, 0xfb, 0x1a, 0x9c,
	0xbf, 0x34, 0x33, 0xa1, 0x44, 0xd5, 0xb3, 0xe8, 0x7b, 0xaf, 0xf6, 0x3d, 0xb1, 0x1a, 0x74, 0x08,
	0x32, 0x42, 0xc5, 0x8e, 0xa1, 0x45, 0xaa, 0xd1, 0xaf, 0x7a, 0x1b, 0x4b, 0x4a, 0x0e, 0xcc, 0x3d,
	0x7b, 0x00, 0x1d, 0x9a, 0x84, 0xc4, 0xa9, 0x99, 0x41, 0x5b, 0xcf, 0x40, 0xe2, 0x94, 0x7d, 0x03,
	0x2d, 0xb3, 0x1a, 0x6c, 0xea, 0xf1, 0xb3, 0x1b, 0x3d, 0x96, 0x8b, 0x22, 0x30, 0x30, 0xf6, 0x1c,
	0xdc, 0xd2, 0x2a, 0x1f, 0x6d, 0x6f, 0x97, 0xf4, 0x71, 0xbf, 0x9e, 0x7b, 0xbd, 0xa0, 0x82, 0x0d,
	0xac, 0x7f, 0x09, 0xec, 0x46, 0xd7, 0x3a, 0x22, 0x20, 0x9d, 0xc5, 0x59, 0x2a, 0x4d, 0xdf, 0x07,
	0xf5, 0x78, 0x9b, 0x1f, 0x04, 0x35, 0xb4, 0x1f, 0x82, 0x57, 0x03, 0xbc, 0x2f, 0x50, 0x2a, 0xf6,
	0x04, 0x9c, 0x8a, 0x91, 0x2a, 0xdc, 0x27, 0xb5, 0x70, 0x55, 0x5f, 0xc1, 0x1a, 0xa5, 0xa5, 0x96,
	0xe5, 0x65, 0x7e, 0xbb, 0x9c, 0x8f, 0x71, 0xfd, 0x18, 0xf6, 0x87, 0x8b, 0x9f, 0xc4, 0x28, 0x2b,
	0x44, 0x84, 0x2f, 0xe3, 0x72, 0xe1, 0x28, 0xbc, 0x56, 0x46, 0x93, 0x64, 0xd7, 0xa5, 0xba, 0xb3,
	0xf9, 0x46, 0x1f, 0xd7, 0x36, 0xc2, 0xad, 0x0a, 0x22, 0x88, 0xff, 0x0a, 0xee, 0x9e, 0x65, 0x49,
	0x1e, 0xcf, 0xb9, 0x4e, 0x1d, 0xa0, 0x2c, 0xe6, 0x8a, 0x1d, 0x40, 0x67, 0xb2, 0x54, 0x48, 0x12,
	0x2d, 0xdf, 0xe7, 0xca, 0xd7, 0x2b, 0x11, 0xf5, 0xac, 0x4b, 0x01, 0x38, 0x81, 0xf1, 0x4e, 0x1e,
	0x82, 0x5b, 0x0f, 0xcf, 0x00, 0x5a, 0x43, 0x5a, 0x96, 0x5e, 0x43, 0xdb, 0xa3, 0x48, 0xc4, 0xb9,
	0xf2, 0xac, 0x93, 0x47, 0xb0, 0xbf, 0x49, 0x32, 0xeb, 0x42, 0xfb, 0x3c, 0x96, 0x11, 0x17, 0x53,
	0xaf, 0xc1, 0x3a, 0x60, 0xff, 0x8c, 0x98, 0x7b, 0xd6, 0xc9, 0xef, 0xe0, 0xac, 0x5e, 0xb0, 0x3e,
	0x7e, 0x91, 0x65, 0x73, 0xaf, 0xc1, 0xda, 0xd0, 0xbc, 0xfa, 0xfe, 0x3b, 0xcf, 0x62, 0x7b, 0xe0,
	0xbc, 0x58, 0x2a, 0x1c, 0x08, 0xc1, 0x97, 0xde, 0x8e, 0x8e, 0x32, 0x28, 0xdb, 0xf7, 0x9a, 0x94,
	0x90, 0xd8, 0xf7, 0x6c, 0xd6, 0x82, 0x9d, 0xab, 0x67, 0xde, 0xae, 0x0e, 0x71, 0xf5, 0xa4, 0xff,
	0xcc, 0x6b, 0x9d, 0x1c, 0x81, 0xb3, 0x5a, 0x47, 0xcc, 0x81, 0x5d, 0xd2, 0xb8, 0xd7, 0x60, 0x2e,
	0x74, 0xce, 0x71, 0x8e, 0x7a, 0x10, 0x9e, 0xd5, 0xff, 0x43, 0xe7, 0x1f, 0xa1, 0x58, 0xe8, 0x07,
	0xfb, 0x0b, 0x78, 0x86, 0xf0, 0xb3, 0x15, 0x7f, 0x0f, 0x3e, 0x24, 0x17, 0x52, 0xc3, 0xc1, 0xe7,
	0xb7, 0x2b, 0x49, 0xfa, 0x8d, 0xfe, 0xeb, 0x72, 0xe5, 0xe8, 0xb1, 0xa3, 0x60, 0x3f, 0x42, 0xdb,
	0xd8, 0x6c, 0xfd, 0x10, 0x36, 0xf9, 0x3f, 0x38, 0xa8, 0x71, 0xb8, 0xc5, 0x96, 0xdf, 0x98, 0xb4,
	0xe8, 0x97, 0xfd, 0xf4, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x62, 0xa3, 0x3c, 0x3c, 0xbe, 0x07,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VMServiceClient is the client API for VMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VMServiceClient interface {
	ExecuteContracts(ctx context.Context, in *VMExecuteRequest, opts ...grpc.CallOption) (*VMExecuteResponses, error)
}

type vMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVMServiceClient(cc grpc.ClientConnInterface) VMServiceClient {
	return &vMServiceClient{cc}
}

func (c *vMServiceClient) ExecuteContracts(ctx context.Context, in *VMExecuteRequest, opts ...grpc.CallOption) (*VMExecuteResponses, error) {
	out := new(VMExecuteResponses)
	err := c.cc.Invoke(ctx, "/vm_grpc.VMService/ExecuteContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMServiceServer is the server API for VMService service.
type VMServiceServer interface {
	ExecuteContracts(context.Context, *VMExecuteRequest) (*VMExecuteResponses, error)
}

// UnimplementedVMServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVMServiceServer struct {
}

func (*UnimplementedVMServiceServer) ExecuteContracts(ctx context.Context, req *VMExecuteRequest) (*VMExecuteResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteContracts not implemented")
}

func RegisterVMServiceServer(s *grpc.Server, srv VMServiceServer) {
	s.RegisterService(&_VMService_serviceDesc, srv)
}

func _VMService_ExecuteContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ExecuteContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm_grpc.VMService/ExecuteContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ExecuteContracts(ctx, req.(*VMExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VMService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vm_grpc.VMService",
	HandlerType: (*VMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteContracts",
			Handler:    _VMService_ExecuteContracts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vm.proto",
}

// VMCompilerClient is the client API for VMCompiler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VMCompilerClient interface {
	Compile(ctx context.Context, in *MvIrSourceFile, opts ...grpc.CallOption) (*CompilationResult, error)
}

type vMCompilerClient struct {
	cc grpc.ClientConnInterface
}

func NewVMCompilerClient(cc grpc.ClientConnInterface) VMCompilerClient {
	return &vMCompilerClient{cc}
}

func (c *vMCompilerClient) Compile(ctx context.Context, in *MvIrSourceFile, opts ...grpc.CallOption) (*CompilationResult, error) {
	out := new(CompilationResult)
	err := c.cc.Invoke(ctx, "/vm_grpc.VMCompiler/Compile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMCompilerServer is the server API for VMCompiler service.
type VMCompilerServer interface {
	Compile(context.Context, *MvIrSourceFile) (*CompilationResult, error)
}

// UnimplementedVMCompilerServer can be embedded to have forward compatible implementations.
type UnimplementedVMCompilerServer struct {
}

func (*UnimplementedVMCompilerServer) Compile(ctx context.Context, req *MvIrSourceFile) (*CompilationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compile not implemented")
}

func RegisterVMCompilerServer(s *grpc.Server, srv VMCompilerServer) {
	s.RegisterService(&_VMCompiler_serviceDesc, srv)
}

func _VMCompiler_Compile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MvIrSourceFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMCompilerServer).Compile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm_grpc.VMCompiler/Compile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMCompilerServer).Compile(ctx, req.(*MvIrSourceFile))
	}
	return interceptor(ctx, in, info, handler)
}

var _VMCompiler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vm_grpc.VMCompiler",
	HandlerType: (*VMCompilerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compile",
			Handler:    _VMCompiler_Compile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vm.proto",
}
