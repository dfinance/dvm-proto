syntax = "proto3";

package vm_grpc;
option go_package = "github.com/dfinance/dvm-proto/go/vm_grpc";

import "common-types.proto";

// An `AbortLocation` specifies where a Move program `abort` occurred, either in a function in
// a module, or in a script.
message AbortLocation {
    bytes address = 1; // Indicates `abort` occurred in the specified module.
    string module = 2; // Indicates the `abort` occurred in a script.
}

// Function location.
message FunctionLoc {
    uint64 function = 1; // Function index.
    uint64 code_offset = 2; // Code offset.

}

// VmStatus `Error` case.
message MoveError {
    // Status code.
    uint64 status_code = 2;
}

// VmStatus `MoveAbort` case.
message Abort {
    // Abort location. (optional). Null if abort occurred in the script.
    AbortLocation abort_location = 1;
    // Abort code.
    uint64 abort_code = 2;
}

// VmStatus `ExecutionFailure` case.
message Failure {
    // Status code.
    uint64 status_code = 1;
    // Abort location. (optional). Null if abort occurred in the script.
    AbortLocation abort_location = 2;
    // Function location.
    FunctionLoc function_loc = 3;
}

/// Message.
message Message {
    // Message with error details if needed.
    string text = 1;
}

// A `VMStatus` is represented as either
// - `Null` indicating successful execution.
// - `Error` indicating an error from the VM itself.
// - `MoveAbort` indicating an `abort` ocurred inside of a Move program
// - `ExecutionFailure` indicating an runtime error.
message VMStatus {
    oneof error {
        // Indicates an error from the VM, e.g. OUT_OF_GAS, INVALID_AUTH_KEY, RET_TYPE_MISMATCH_ERROR
        // etc.
        // The code will neither EXECUTED nor ABORTED
        MoveError move_error = 1;
        // Indicates an error from the VM, e.g. OUT_OF_GAS, INVALID_AUTH_KEY, RET_TYPE_MISMATCH_ERROR
        // etc.
        // The code will neither EXECUTED nor ABORTED
        Abort abort = 2;
        // Indicates an failure from inside Move code, where the VM could not continue exection, e.g.
        // dividing by zero or a missing resource
        Failure execution_failure = 3;
    }
    // Message with error details if needed (optional).
    Message message = 4;
}

/// Full name of the structure.
message StructIdent {
    bytes address = 1; // address of module owner
    string module = 2; // module name.
    string name = 3; // name of structure.
    repeated LcsTag type_params = 4; // Structure type parameters.
}

enum LcsType {
    LcsBool = 0; // Bool
    LcsU64 = 1; // Uint64
    LcsVector = 2; // Vector of bytes.
    LcsAddress = 3; // Address, in bech32 form
    LcsU8 = 4; // U8
    LcsU128 = 5; // U128
    LcsSigner = 6; // Signer.
    LcsStruct = 7; // Struct.
}

message LcsTag {
    LcsType type_tag = 1; // type tag.
    LcsTag vector_type = 2; // vector type. Has a non-null value if the type_tag is equal to a LcsVector.
    StructIdent struct_ident = 3; // struct identifier. Has a non-null value if the type_tag is equal to a LcsStruct.
}

/// Module identifier.
message ModuleIdent {
    bytes address = 1; // module address.
    string name = 2; // module name.
}

// VM event returns after contract execution.
message VMEvent {
    bytes sender_address = 1; // Event sender address.
    ModuleIdent sender_module = 2; // sender module.
    LcsTag event_type = 3; // Type of value inside event.
    bytes event_data = 4; // Event data in bytes to parse.
}

// Write set operation type.
enum VmWriteOp {
    Value = 0; // Insert or update value
    Deletion = 1; // Delete.
}

// Storage path
message VMAccessPath {
    bytes address = 1; // account address.
    bytes path = 2; // storage path.
}

// VM value should be passed before execution and return after execution (with opcodes), write_set in nutshell.
message VMValue {
    VmWriteOp type = 2; // Type of operation
    bytes value = 1; // Value returns from vm.
    VMAccessPath path = 3; // Access path.
}

// Contract arguments.
message VMArgs {
    types.VMTypeTag type = 1; // Argument type.
    bytes value = 2; // Argument value.
}

// Publish module.
message VMPublishModule {
    bytes sender = 1; // owner of contract.
    uint64 max_gas_amount = 2; // maximal total gas specified by wallet to spend for this transaction.
    uint64 gas_unit_price = 3; // maximal price can be paid per gas.
    bytes code = 4; // compiled contract code.
}

// VM contract object to process.
message VMExecuteScript {
    repeated bytes senders = 1; // owners of contract.
    uint64 max_gas_amount = 2; // maximal total gas specified by wallet to spend for this transaction.
    uint64 gas_unit_price = 3; // maximal price can be paid per gas.
    uint64 block = 4; // block.
    uint64 timestamp = 5; // timestamp.
    bytes code = 6; // compiled contract code.
    repeated StructIdent type_params = 7; // type parameters.
    repeated VMArgs args = 8; // Contract arguments.
}

message VMBalanceChange {
  oneof op {
    types.u128 deposit = 1;
    types.u128 withdraw = 2;
  }
}

message VMBalanceChangeSet {
  repeated VMBalanceChange change_set = 1;
}

// Response from VM contains write_set, events, gas used and status for specific contract.
message VMExecuteResponse {
    repeated VMValue write_set = 1; // using string instead of bytes for now, as map support only ints and strings as keys
    repeated VMEvent events = 2; // list of events executed during contract execution
    repeated VMBalanceChange balance_change_set = 3; // list of native balance updates.
    uint64 gas_used = 4; // Gas used during execution.
    VMStatus status = 5; // Main status of execution, might contain an error.
}

// GRPC service
service VMModulePublisher {
    rpc PublishModule (VMPublishModule) returns (VMExecuteResponse) {
    }
}

service VMScriptExecutor {
    rpc ExecuteScript (VMExecuteScript) returns (VMExecuteResponse) {
    }
}

// Compiled source.
message CompiledUnit {
    string name = 1; // name of the module/script.
    bytes bytecode = 2; // bytecode of the compiled module/script
}

message MultipleCompilationResult {
    repeated CompiledUnit units = 1;
    repeated string errors = 2; // list of error messages, empty if successful
}
