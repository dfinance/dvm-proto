syntax = "proto3";

package vm_grpc;

// Type of contract (module or script).
enum ContractType {
    Module = 0; // If VM works with module.
    Script = 1; // If VM works with script.
}

// Status of contract execution.
enum ContractStatus {
    Discard = 0; // If transaction should be ignored, because of error.
    Keep = 1; // If we keep transaction and write write_set.
}

// Status of code contract execution.
message VMErrorStatus {
    uint64 major_status = 1; // Major error status.
    uint64 sub_status = 2; // Sub status if needed (optional).
    string message = 3; // Message with error details if needed (optional).
}

// Type of value returned by event during contract execution.
enum VMTypeTag {
    Bool = 0;  // Bool
    U64  = 1;  // Uint64
    ByteArray = 2; // Bytes
    Address   = 3; // Address
    Struct    = 4; // Structure (could be several arguments for event call).
    U8 = 5; // U8
    U128 = 6; // U128
}

// Describing VMType for events.
message VMType {
    VMTypeTag tag = 1; // Type.
    VMStructTag struct_tag = 2; // If type is Struct put struct into variable, otherwise not, optional value.
}

// Structure tag (for vm events contains structures).
message VMStructTag {
    bytes  address = 1; // address of module owner
    string module = 2; // module where event happens.
    string name = 3; // name of event (not sure yet, need to test).
    repeated VMType type_params = 4; // event parameters (recursive).
}

// VM event returns after contract execution.
message VMEvent {
    bytes key = 1; // key to store vm event.
    uint64 sequence_number = 2; // sequence number of event during execution.
    VMType type = 3; // Type of value inside event.
    bytes event_data = 4; // Event data in bytes to parse.
}

// Write set operation type.
enum VmWriteOp {
    Value = 0; // Insert or update value
    Deletion = 1; // Delete.
}

// Storage path
message VMAccessPath {
    bytes address = 1; // account address.
    bytes path = 2; // storage path.
}

// VM value should be passed before execution and return after execution (with opcodes), write_set in nutshell.
message VMValue {
    VmWriteOp type = 2; // Type of operation
    bytes value = 1; // Value returns from vm.
    VMAccessPath path = 3; // Access path.
}

// Contract arguments.
message VMArgs {
    VMTypeTag type = 1; // Argument type.
    string value = 2; // Argument value.
}

// VM contract object to process.
message VMContract {
    bytes address = 1; // owner of contract (module) or script executor.
    uint64 max_gas_amount = 2; // maximal total gas specified by wallet to spend for this transaction.
    uint64 gas_unit_price = 3; // maximal price can be paid per gas.
    bytes code = 4; // compiled contract code.
    ContractType contract_type = 6; // Type of contract
    repeated VMArgs args = 7; // Contract arguments.
}

// Response from VM contains write_set, events, gas used and status for specific contract.
message VMExecuteResponse {
    repeated VMValue write_set = 1; // using string instead of bytes for now, as map support only ints and strings as keys
    repeated VMEvent events = 2; // list of events executed during contract execution
    uint64 gas_used = 3; // Gas used during execution.
    ContractStatus status = 4; // Status of contract execution.
    VMErrorStatus statusStruct = 5; // Status in case of error.
}

// Response from VM in case of execution multiplay contracts.
message VMExecuteResponses {
    repeated VMExecuteResponse executions = 1; // Result of executions.
}

// Execute request for VM
message VMExecuteRequest {
    repeated VMContract contracts = 1; // contracts to execute.
    uint64 options = 4; // options to execute.
}

// GRPC service
service VMService {
    rpc ExecuteContracts (VMExecuteRequest) returns (VMExecuteResponses) {}
}

message MvIrSourceFile {
    string text = 1;
    bytes address = 2;
    bool is_module = 3;
}

message CompilationResult {
    bytes bytecode = 1;
    repeated string errors = 2;
}

service VMCompiler {
    rpc Compile (MvIrSourceFile) returns (CompilationResult) {}
}